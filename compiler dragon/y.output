Terminals which are not used

   NUMBER
   LT
   LE
   GT
   GE
   EQ
   NEQ
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   DIV
   MOD
   CHAR
   STRING
   BOOLEAN
   EMTPY
   CONDITIONAL
   TYPE
   LIST
   ARRAY_ACCESS
   ARRAY_RANGE
   STATEMENT
   FUNCTION_CALL
   PROCEDURE_CALL
   WHILE_DO
   DECL
   SUBDECL
   SUBDECLS
   SUBPROGDECL
   SUBPROGDECLHEAD
   LOCAL
   PARAMETER
   IDLIST
   EXPR
   EXPRLIST
   PARALIST
   ARGLIST
   DECLIST
   STATLIST
   PROCSTAT
   COMPSTAT


State 96 conflicts: 1 shift/reduce
State 97 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 @1: /* empty */

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | /* empty */

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | /* empty */

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   14 @2: /* empty */

   15 @3: /* empty */

   16 subprogram_head: @2 FUNCTION ID @3 arguments ':' standard_type ';'

   17 @4: /* empty */

   18 @5: /* empty */

   19 subprogram_head: @4 PROCEDURE ID @5 arguments ';'

   20 arguments: '(' parameter_list ')'
   21          | /* empty */

   22 parameter_list: identifier_list ':' type
   23               | parameter_list ';' identifier_list ':' type

   24 compound_statement: BBEGIN optional_statements END

   25 optional_statements: statement_list
   26                    | /* empty */

   27 statement_list: statement
   28               | statement_list ';' statement

   29 statement: conditions
   30          | ifelse

   31 conditions: variable ASSIGNOP expression
   32           | procedure_statement
   33           | compound_statement
   34           | IF expression THEN statement ELSE statement
   35           | WHILE expression DO statement
   36           | FOR ID ASSIGNOP expression TO expression DO conditions

   37 ifelse: IF expression THEN statement
   38       | IF expression THEN ifelse ELSE conditions

   39 variable: ID
   40         | ID '[' expression ']'

   41 procedure_statement: ID
   42                    | ID '(' expression_list ')'

   43 expression_list: expression
   44                | expression_list ',' expression

   45 expression: simple_expression
   46           | simple_expression RELOP simple_expression

   47 simple_expression: term
   48                  | sign term
   49                  | simple_expression ADDOP term

   50 term: factor
   51     | term MULOP factor

   52 factor: ID
   53       | ID '(' expression_list ')'
   54       | ID '[' expression_list ']'
   55       | INUM
   56       | RNUM
   57       | '(' expression ')'
   58       | NOT factor

   59 sign: '+'
   60     | '-'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 20 42 53 57
')' (41) 2 20 42 53 57
'+' (43) 59
',' (44) 4 44
'-' (45) 60
'.' (46) 2
':' (58) 5 16 22 23
';' (59) 2 5 11 16 19 23 28
'[' (91) 8 40 54
']' (93) 8 40 54
error (256)
NUMBER (258)
INUM (259) 8 55
RNUM (260) 56
ID (261) 2 3 4 16 19 36 39 40 41 42 52 53 54
NOT (262) 58
ASSIGNOP (263) 31 36
RELOP (264) 46
LT (265)
LE (266)
GT (267)
GE (268)
EQ (269)
NEQ (270)
ADDOP (271) 49
OR (272)
PLUS (273)
MINUS (274)
MULOP (275) 51
AND (276)
STAR (277)
SLASH (278)
DIV (279)
MOD (280)
PROGRAM (281) 2
VAR (282) 5
ARRAY (283) 8
OF (284) 8
DOTDOT (285) 8
INTEGER (286) 9
REAL (287) 10
CHAR (288)
STRING (289)
BOOLEAN (290)
FUNCTION (291) 16
PROCEDURE (292) 19
BBEGIN (293) 24
END (294) 24
IF (295) 34 37 38
THEN (296) 34 37 38
ELSE (297) 34 38
WHILE (298) 35
DO (299) 35 36
FOR (300) 36
TO (301) 36
EMTPY (302)
CONDITIONAL (303)
TYPE (304)
LIST (305)
ARRAY_ACCESS (306)
ARRAY_RANGE (307)
STATEMENT (308)
FUNCTION_CALL (309)
PROCEDURE_CALL (310)
WHILE_DO (311)
DECL (312)
SUBDECL (313)
SUBDECLS (314)
SUBPROGDECL (315)
SUBPROGDECLHEAD (316)
LOCAL (317)
PARAMETER (318)
IDLIST (319)
EXPR (320)
EXPRLIST (321)
PARALIST (322)
ARGLIST (323)
DECLIST (324)
STATLIST (325)
PROCSTAT (326)
COMPSTAT (327)


Nonterminals, with rules where they appear

$accept (83)
    on left: 0
program (84)
    on left: 2, on right: 0
@1 (85)
    on left: 1, on right: 2
identifier_list (86)
    on left: 3 4, on right: 2 4 5 22 23
declarations (87)
    on left: 5 6, on right: 2 5 13
type (88)
    on left: 7 8, on right: 5 22 23
standard_type (89)
    on left: 9 10, on right: 7 8 16
subprogram_declarations (90)
    on left: 11 12, on right: 2 11 13
subprogram_declaration (91)
    on left: 13, on right: 11
subprogram_head (92)
    on left: 16 19, on right: 13
@2 (93)
    on left: 14, on right: 16
@3 (94)
    on left: 15, on right: 16
@4 (95)
    on left: 17, on right: 19
@5 (96)
    on left: 18, on right: 19
arguments (97)
    on left: 20 21, on right: 16 19
parameter_list (98)
    on left: 22 23, on right: 20 23
compound_statement (99)
    on left: 24, on right: 2 13 33
optional_statements (100)
    on left: 25 26, on right: 24
statement_list (101)
    on left: 27 28, on right: 25 28
statement (102)
    on left: 29 30, on right: 27 28 34 35 37
conditions (103)
    on left: 31 32 33 34 35 36, on right: 29 36 38
ifelse (104)
    on left: 37 38, on right: 30 38
variable (105)
    on left: 39 40, on right: 31
procedure_statement (106)
    on left: 41 42, on right: 32
expression_list (107)
    on left: 43 44, on right: 42 44 53 54
expression (108)
    on left: 45 46, on right: 31 34 35 36 37 38 40 43 44 57
simple_expression (109)
    on left: 47 48 49, on right: 45 46 49
term (110)
    on left: 50 51, on right: 47 48 49 51
factor (111)
    on left: 52 53 54 55 56 57 58, on right: 50 51 58
sign (112)
    on left: 59 60, on right: 48


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 (@1)

    program  go to state 1
    @1       go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: @1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    2 program: @1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


state 5

    2 program: @1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


state 6

    2 program: @1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


state 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


state 8

    2 program: @1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


state 9

    2 program: @1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


state 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


state 11

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


state 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


state 13

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 15


state 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


state 15

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    BBEGIN  shift, and go to state 17

    PROCEDURE  reduce using rule 17 (@4)
    $default   reduce using rule 14 (@2)

    subprogram_declaration  go to state 18
    subprogram_head         go to state 19
    @2                      go to state 20
    @4                      go to state 21
    compound_statement      go to state 22


state 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


state 17

   24 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 24
    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 25
    WHILE   shift, and go to state 26
    FOR     shift, and go to state 27

    $default  reduce using rule 26 (optional_statements)

    compound_statement   go to state 28
    optional_statements  go to state 29
    statement_list       go to state 30
    statement            go to state 31
    conditions           go to state 32
    ifelse               go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


state 18

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 36


state 19

   13 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 37


state 20

   16 subprogram_head: @2 . FUNCTION ID @3 arguments ':' standard_type ';'

    FUNCTION  shift, and go to state 38


state 21

   19 subprogram_head: @4 . PROCEDURE ID @5 arguments ';'

    PROCEDURE  shift, and go to state 39


state 22

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 40


state 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 41
    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43

    type           go to state 44
    standard_type  go to state 45


state 24

   39 variable: ID .
   40         | ID . '[' expression ']'
   41 procedure_statement: ID .
   42                    | ID . '(' expression_list ')'

    '('  shift, and go to state 46
    '['  shift, and go to state 47

    ASSIGNOP  reduce using rule 39 (variable)
    $default  reduce using rule 41 (procedure_statement)


state 25

   34 conditions: IF . expression THEN statement ELSE statement
   37 ifelse: IF . expression THEN statement
   38       | IF . expression THEN ifelse ELSE conditions

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression         go to state 55
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 26

   35 conditions: WHILE . expression DO statement

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression         go to state 60
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 27

   36 conditions: FOR . ID ASSIGNOP expression TO expression DO conditions

    ID  shift, and go to state 61


state 28

   33 conditions: compound_statement .

    $default  reduce using rule 33 (conditions)


state 29

   24 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 62


state 30

   25 optional_statements: statement_list .
   28 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 63

    $default  reduce using rule 25 (optional_statements)


state 31

   27 statement_list: statement .

    $default  reduce using rule 27 (statement_list)


state 32

   29 statement: conditions .

    $default  reduce using rule 29 (statement)


state 33

   30 statement: ifelse .

    $default  reduce using rule 30 (statement)


state 34

   31 conditions: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 64


state 35

   32 conditions: procedure_statement .

    $default  reduce using rule 32 (conditions)


state 36

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


state 37

    5 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 65


state 38

   16 subprogram_head: @2 FUNCTION . ID @3 arguments ':' standard_type ';'

    ID  shift, and go to state 66


state 39

   19 subprogram_head: @4 PROCEDURE . ID @5 arguments ';'

    ID  shift, and go to state 67


state 40

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


state 41

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 68


state 42

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


state 43

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


state 44

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 69


state 45

    7 type: standard_type .

    $default  reduce using rule 7 (type)


state 46

   42 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression_list    go to state 70
    expression         go to state 71
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 47

   40 variable: ID '[' . expression ']'

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression         go to state 72
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 48

   55 factor: INUM .

    $default  reduce using rule 55 (factor)


state 49

   56 factor: RNUM .

    $default  reduce using rule 56 (factor)


state 50

   52 factor: ID .
   53       | ID . '(' expression_list ')'
   54       | ID . '[' expression_list ']'

    '('  shift, and go to state 73
    '['  shift, and go to state 74

    $default  reduce using rule 52 (factor)


state 51

   58 factor: NOT . factor

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52

    factor  go to state 75


state 52

   57 factor: '(' . expression ')'

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression         go to state 76
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 53

   59 sign: '+' .

    $default  reduce using rule 59 (sign)


state 54

   60 sign: '-' .

    $default  reduce using rule 60 (sign)


state 55

   34 conditions: IF expression . THEN statement ELSE statement
   37 ifelse: IF expression . THEN statement
   38       | IF expression . THEN ifelse ELSE conditions

    THEN  shift, and go to state 77


state 56

   45 expression: simple_expression .
   46           | simple_expression . RELOP simple_expression
   49 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 78
    ADDOP  shift, and go to state 79

    $default  reduce using rule 45 (expression)


state 57

   47 simple_expression: term .
   51 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 47 (simple_expression)


state 58

   50 term: factor .

    $default  reduce using rule 50 (term)


state 59

   48 simple_expression: sign . term

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52

    term    go to state 81
    factor  go to state 58


state 60

   35 conditions: WHILE expression . DO statement

    DO  shift, and go to state 82


state 61

   36 conditions: FOR ID . ASSIGNOP expression TO expression DO conditions

    ASSIGNOP  shift, and go to state 83


state 62

   24 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 24 (compound_statement)


state 63

   28 statement_list: statement_list ';' . statement

    ID      shift, and go to state 24
    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 25
    WHILE   shift, and go to state 26
    FOR     shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 84
    conditions           go to state 32
    ifelse               go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


state 64

   31 conditions: variable ASSIGNOP . expression

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression         go to state 85
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 65

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   13 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    BBEGIN  shift, and go to state 17

    PROCEDURE  reduce using rule 17 (@4)
    $default   reduce using rule 14 (@2)

    subprogram_declaration  go to state 18
    subprogram_head         go to state 19
    @2                      go to state 20
    @4                      go to state 21
    compound_statement      go to state 86


state 66

   16 subprogram_head: @2 FUNCTION ID . @3 arguments ':' standard_type ';'

    $default  reduce using rule 15 (@3)

    @3  go to state 87


state 67

   19 subprogram_head: @4 PROCEDURE ID . @5 arguments ';'

    $default  reduce using rule 18 (@5)

    @5  go to state 88


state 68

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 89


state 69

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


state 70

   42 procedure_statement: ID '(' expression_list . ')'
   44 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 90
    ','  shift, and go to state 91


state 71

   43 expression_list: expression .

    $default  reduce using rule 43 (expression_list)


state 72

   40 variable: ID '[' expression . ']'

    ']'  shift, and go to state 92


state 73

   53 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression_list    go to state 93
    expression         go to state 71
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 74

   54 factor: ID '[' . expression_list ']'

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression_list    go to state 94
    expression         go to state 71
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 75

   58 factor: NOT factor .

    $default  reduce using rule 58 (factor)


state 76

   57 factor: '(' expression . ')'

    ')'  shift, and go to state 95


state 77

   34 conditions: IF expression THEN . statement ELSE statement
   37 ifelse: IF expression THEN . statement
   38       | IF expression THEN . ifelse ELSE conditions

    ID      shift, and go to state 24
    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 25
    WHILE   shift, and go to state 26
    FOR     shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 96
    conditions           go to state 32
    ifelse               go to state 97
    variable             go to state 34
    procedure_statement  go to state 35


state 78

   46 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    simple_expression  go to state 98
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 79

   49 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52

    term    go to state 99
    factor  go to state 58


state 80

   51 term: term MULOP . factor

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52

    factor  go to state 100


state 81

   48 simple_expression: sign term .
   51 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 48 (simple_expression)


state 82

   35 conditions: WHILE expression DO . statement

    ID      shift, and go to state 24
    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 25
    WHILE   shift, and go to state 26
    FOR     shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 101
    conditions           go to state 32
    ifelse               go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


state 83

   36 conditions: FOR ID ASSIGNOP . expression TO expression DO conditions

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression         go to state 102
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 84

   28 statement_list: statement_list ';' statement .

    $default  reduce using rule 28 (statement_list)


state 85

   31 conditions: variable ASSIGNOP expression .

    $default  reduce using rule 31 (conditions)


state 86

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


state 87

   16 subprogram_head: @2 FUNCTION ID @3 . arguments ':' standard_type ';'

    '('  shift, and go to state 103

    $default  reduce using rule 21 (arguments)

    arguments  go to state 104


state 88

   19 subprogram_head: @4 PROCEDURE ID @5 . arguments ';'

    '('  shift, and go to state 103

    $default  reduce using rule 21 (arguments)

    arguments  go to state 105


state 89

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 106


state 90

   42 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 42 (procedure_statement)


state 91

   44 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression         go to state 107
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 92

   40 variable: ID '[' expression ']' .

    $default  reduce using rule 40 (variable)


state 93

   44 expression_list: expression_list . ',' expression
   53 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 108
    ','  shift, and go to state 91


state 94

   44 expression_list: expression_list . ',' expression
   54 factor: ID '[' expression_list . ']'

    ','  shift, and go to state 91
    ']'  shift, and go to state 109


state 95

   57 factor: '(' expression ')' .

    $default  reduce using rule 57 (factor)


state 96

   34 conditions: IF expression THEN statement . ELSE statement
   37 ifelse: IF expression THEN statement .

    ELSE  shift, and go to state 110

    ELSE      [reduce using rule 37 (ifelse)]
    $default  reduce using rule 37 (ifelse)


state 97

   30 statement: ifelse .
   38 ifelse: IF expression THEN ifelse . ELSE conditions

    ELSE  shift, and go to state 111

    ELSE      [reduce using rule 30 (statement)]
    $default  reduce using rule 30 (statement)


state 98

   46 expression: simple_expression RELOP simple_expression .
   49 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 79

    $default  reduce using rule 46 (expression)


state 99

   49 simple_expression: simple_expression ADDOP term .
   51 term: term . MULOP factor

    MULOP  shift, and go to state 80

    $default  reduce using rule 49 (simple_expression)


state 100

   51 term: term MULOP factor .

    $default  reduce using rule 51 (term)


state 101

   35 conditions: WHILE expression DO statement .

    $default  reduce using rule 35 (conditions)


state 102

   36 conditions: FOR ID ASSIGNOP expression . TO expression DO conditions

    TO  shift, and go to state 112


state 103

   20 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 113
    parameter_list   go to state 114


state 104

   16 subprogram_head: @2 FUNCTION ID @3 arguments . ':' standard_type ';'

    ':'  shift, and go to state 115


state 105

   19 subprogram_head: @4 PROCEDURE ID @5 arguments . ';'

    ';'  shift, and go to state 116


state 106

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 117


state 107

   44 expression_list: expression_list ',' expression .

    $default  reduce using rule 44 (expression_list)


state 108

   53 factor: ID '(' expression_list ')' .

    $default  reduce using rule 53 (factor)


state 109

   54 factor: ID '[' expression_list ']' .

    $default  reduce using rule 54 (factor)


state 110

   34 conditions: IF expression THEN statement ELSE . statement

    ID      shift, and go to state 24
    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 25
    WHILE   shift, and go to state 26
    FOR     shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 118
    conditions           go to state 32
    ifelse               go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


state 111

   38 ifelse: IF expression THEN ifelse ELSE . conditions

    ID      shift, and go to state 24
    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 119
    WHILE   shift, and go to state 26
    FOR     shift, and go to state 27

    compound_statement   go to state 28
    conditions           go to state 120
    variable             go to state 34
    procedure_statement  go to state 35


state 112

   36 conditions: FOR ID ASSIGNOP expression TO . expression DO conditions

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression         go to state 121
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 113

    4 identifier_list: identifier_list . ',' ID
   22 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 122


state 114

   20 arguments: '(' parameter_list . ')'
   23 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 123
    ';'  shift, and go to state 124


state 115

   16 subprogram_head: @2 FUNCTION ID @3 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43

    standard_type  go to state 125


state 116

   19 subprogram_head: @4 PROCEDURE ID @5 arguments ';' .

    $default  reduce using rule 19 (subprogram_head)


state 117

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 126


state 118

   34 conditions: IF expression THEN statement ELSE statement .

    $default  reduce using rule 34 (conditions)


state 119

   34 conditions: IF . expression THEN statement ELSE statement

    INUM  shift, and go to state 48
    RNUM  shift, and go to state 49
    ID    shift, and go to state 50
    NOT   shift, and go to state 51
    '('   shift, and go to state 52
    '+'   shift, and go to state 53
    '-'   shift, and go to state 54

    expression         go to state 127
    simple_expression  go to state 56
    term               go to state 57
    factor             go to state 58
    sign               go to state 59


state 120

   38 ifelse: IF expression THEN ifelse ELSE conditions .

    $default  reduce using rule 38 (ifelse)


state 121

   36 conditions: FOR ID ASSIGNOP expression TO expression . DO conditions

    DO  shift, and go to state 128


state 122

   22 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 41
    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43

    type           go to state 129
    standard_type  go to state 45


state 123

   20 arguments: '(' parameter_list ')' .

    $default  reduce using rule 20 (arguments)


state 124

   23 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 130


state 125

   16 subprogram_head: @2 FUNCTION ID @3 arguments ':' standard_type . ';'

    ';'  shift, and go to state 131


state 126

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 132


state 127

   34 conditions: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 133


state 128

   36 conditions: FOR ID ASSIGNOP expression TO expression DO . conditions

    ID      shift, and go to state 24
    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 119
    WHILE   shift, and go to state 26
    FOR     shift, and go to state 27

    compound_statement   go to state 28
    conditions           go to state 134
    variable             go to state 34
    procedure_statement  go to state 35


state 129

   22 parameter_list: identifier_list ':' type .

    $default  reduce using rule 22 (parameter_list)


state 130

    4 identifier_list: identifier_list . ',' ID
   23 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 135


state 131

   16 subprogram_head: @2 FUNCTION ID @3 arguments ':' standard_type ';' .

    $default  reduce using rule 16 (subprogram_head)


state 132

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43

    standard_type  go to state 136


state 133

   34 conditions: IF expression THEN . statement ELSE statement

    ID      shift, and go to state 24
    BBEGIN  shift, and go to state 17
    IF      shift, and go to state 25
    WHILE   shift, and go to state 26
    FOR     shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 137
    conditions           go to state 32
    ifelse               go to state 33
    variable             go to state 34
    procedure_statement  go to state 35


state 134

   36 conditions: FOR ID ASSIGNOP expression TO expression DO conditions .

    $default  reduce using rule 36 (conditions)


state 135

   23 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 41
    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43

    type           go to state 138
    standard_type  go to state 45


state 136

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)


state 137

   34 conditions: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 110


state 138

   23 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 23 (parameter_list)
