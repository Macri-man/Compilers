Terminals which are not used

   NUMBER
   LT
   LE
   GT
   GE
   EQ
   NEQ
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   DIV
   MOD
   LIST
   ARRAY_ACCESS
   FUNCTION_CALL


Grammar

    0 $accept: program $end

    1 @1: /* empty */

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | /* empty */

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | /* empty */

   13 subprogram_declaration: subprogram_head declarations compound_statement

   14 @2: /* empty */

   15 subprogram_head: FUNCTION ID @2 arguments ':' standard_type ';'

   16 @3: /* empty */

   17 subprogram_head: PROCEDURE ID @3 arguments ';'

   18 arguments: '(' parameter_list ')'
   19          | /* empty */

   20 parameter_list: identifier_list ':' type
   21               | parameter_list ';' identifier_list ':' type

   22 compound_statement: BBEGIN optional_statements END

   23 optional_statements: statement_list
   24                    | /* empty */

   25 statement_list: statement
   26               | statement_list ';' statement

   27 statement: variable ASSIGNOP expression
   28          | procedure_statement
   29          | compound_statement
   30          | IF expression THEN statement ELSE statement
   31          | WHILE expression DO statement

   32 variable: ID
   33         | ID '[' expression ']'

   34 procedure_statement: ID
   35                    | ID '(' expression_list ')'

   36 expression_list: expression
   37                | expression_list ',' expression

   38 expression: simple_expression
   39           | simple_expression RELOP simple_expression

   40 simple_expression: term
   41                  | simple_expression ADDOP term

   42 term: factor
   43     | term MULOP factor

   44 factor: ID
   45       | ID '(' expression_list ')'
   46       | ID '[' expression_list ']'
   47       | INUM
   48       | RNUM
   49       | '(' expression ')'
   50       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 18 35 45 49
')' (41) 2 18 35 45 49
',' (44) 4 37
'.' (46) 2
':' (58) 5 15 20 21
';' (59) 2 5 11 15 17 21 26
'[' (91) 8 33 46
']' (93) 8 33 46
error (256)
NUMBER (258)
INUM (259) 8 47
RNUM (260) 48
ID (261) 2 3 4 15 17 32 33 34 35 44 45 46
NOT (262) 50
ASSIGNOP (263) 27
RELOP (264) 39
LT (265)
LE (266)
GT (267)
GE (268)
EQ (269)
NEQ (270)
ADDOP (271) 41
OR (272)
PLUS (273)
MINUS (274)
MULOP (275) 43
AND (276)
STAR (277)
SLASH (278)
DIV (279)
MOD (280)
PROGRAM (281) 2
VAR (282) 5
ARRAY (283) 8
OF (284) 8
DOTDOT (285) 8
INTEGER (286) 9
REAL (287) 10
FUNCTION (288) 15
PROCEDURE (289) 17
BBEGIN (290) 22
END (291) 22
IF (292) 30
THEN (293) 30
ELSE (294) 30
WHILE (295) 31
DO (296) 31
LIST (297)
ARRAY_ACCESS (298)
FUNCTION_CALL (299)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 2, on right: 0
@1 (55)
    on left: 1, on right: 2
identifier_list (56)
    on left: 3 4, on right: 2 4 5 20 21
declarations (57)
    on left: 5 6, on right: 2 5 13
type (58)
    on left: 7 8, on right: 5 20 21
standard_type (59)
    on left: 9 10, on right: 7 8 15
subprogram_declarations (60)
    on left: 11 12, on right: 2 11
subprogram_declaration (61)
    on left: 13, on right: 11
subprogram_head (62)
    on left: 15 17, on right: 13
@2 (63)
    on left: 14, on right: 15
@3 (64)
    on left: 16, on right: 17
arguments (65)
    on left: 18 19, on right: 15 17
parameter_list (66)
    on left: 20 21, on right: 18 21
compound_statement (67)
    on left: 22, on right: 2 13 29
optional_statements (68)
    on left: 23 24, on right: 22
statement_list (69)
    on left: 25 26, on right: 23 26
statement (70)
    on left: 27 28 29 30 31, on right: 25 26 30 31
variable (71)
    on left: 32 33, on right: 27
procedure_statement (72)
    on left: 34 35, on right: 28
expression_list (73)
    on left: 36 37, on right: 35 37 45 46
expression (74)
    on left: 38 39, on right: 27 30 31 33 36 37 49
simple_expression (75)
    on left: 40 41, on right: 38 39 41
term (76)
    on left: 42 43, on right: 40 41 43
factor (77)
    on left: 44 45 46 47 48 49 50, on right: 42 43 50


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 (@1)

    program  go to state 1
    @1       go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: @1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    2 program: @1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


state 5

    2 program: @1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


state 6

    2 program: @1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


state 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


state 8

    2 program: @1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


state 9

    2 program: @1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


state 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


state 11

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


state 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


state 13

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 15


state 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


state 15

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 22


state 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


state 17

   15 subprogram_head: FUNCTION . ID @2 arguments ':' standard_type ';'

    ID  shift, and go to state 24


state 18

   17 subprogram_head: PROCEDURE . ID @3 arguments ';'

    ID  shift, and go to state 25


state 19

   22 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    $default  reduce using rule 24 (optional_statements)

    compound_statement   go to state 29
    optional_statements  go to state 30
    statement_list       go to state 31
    statement            go to state 32
    variable             go to state 33
    procedure_statement  go to state 34


state 20

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 35


state 21

   13 subprogram_declaration: subprogram_head . declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 36


state 22

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 37


state 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 41
    standard_type  go to state 42


state 24

   15 subprogram_head: FUNCTION ID . @2 arguments ':' standard_type ';'

    $default  reduce using rule 14 (@2)

    @2  go to state 43


state 25

   17 subprogram_head: PROCEDURE ID . @3 arguments ';'

    $default  reduce using rule 16 (@3)

    @3  go to state 44


state 26

   32 variable: ID .
   33         | ID . '[' expression ']'
   34 procedure_statement: ID .
   35                    | ID . '(' expression_list ')'

    '('  shift, and go to state 45
    '['  shift, and go to state 46

    ASSIGNOP  reduce using rule 32 (variable)
    $default  reduce using rule 34 (procedure_statement)


state 27

   30 statement: IF . expression THEN statement ELSE statement

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 52
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


state 28

   31 statement: WHILE . expression DO statement

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 56
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


state 29

   29 statement: compound_statement .

    $default  reduce using rule 29 (statement)


state 30

   22 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 57


state 31

   23 optional_statements: statement_list .
   26 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 58

    $default  reduce using rule 23 (optional_statements)


state 32

   25 statement_list: statement .

    $default  reduce using rule 25 (statement_list)


state 33

   27 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 59


state 34

   28 statement: procedure_statement .

    $default  reduce using rule 28 (statement)


state 35

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


state 36

    5 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head declarations . compound_statement

    VAR     shift, and go to state 14
    BBEGIN  shift, and go to state 19

    compound_statement  go to state 60


state 37

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


state 38

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 61


state 39

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


state 40

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


state 41

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 62


state 42

    7 type: standard_type .

    $default  reduce using rule 7 (type)


state 43

   15 subprogram_head: FUNCTION ID @2 . arguments ':' standard_type ';'

    '('  shift, and go to state 63

    $default  reduce using rule 19 (arguments)

    arguments  go to state 64


state 44

   17 subprogram_head: PROCEDURE ID @3 . arguments ';'

    '('  shift, and go to state 63

    $default  reduce using rule 19 (arguments)

    arguments  go to state 65


state 45

   35 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression_list    go to state 66
    expression         go to state 67
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


state 46

   33 variable: ID '[' . expression ']'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 68
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


state 47

   47 factor: INUM .

    $default  reduce using rule 47 (factor)


state 48

   48 factor: RNUM .

    $default  reduce using rule 48 (factor)


state 49

   44 factor: ID .
   45       | ID . '(' expression_list ')'
   46       | ID . '[' expression_list ']'

    '('  shift, and go to state 69
    '['  shift, and go to state 70

    $default  reduce using rule 44 (factor)


state 50

   50 factor: NOT . factor

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    factor  go to state 71


state 51

   49 factor: '(' . expression ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 72
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


state 52

   30 statement: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 73


state 53

   38 expression: simple_expression .
   39           | simple_expression . RELOP simple_expression
   41 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 74
    ADDOP  shift, and go to state 75

    $default  reduce using rule 38 (expression)


state 54

   40 simple_expression: term .
   43 term: term . MULOP factor

    MULOP  shift, and go to state 76

    $default  reduce using rule 40 (simple_expression)


state 55

   42 term: factor .

    $default  reduce using rule 42 (term)


state 56

   31 statement: WHILE expression . DO statement

    DO  shift, and go to state 77


state 57

   22 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 22 (compound_statement)


state 58

   26 statement_list: statement_list ';' . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 78
    variable             go to state 33
    procedure_statement  go to state 34


state 59

   27 statement: variable ASSIGNOP . expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 79
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


state 60

   13 subprogram_declaration: subprogram_head declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


state 61

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 80


state 62

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


state 63

   18 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 81
    parameter_list   go to state 82


state 64

   15 subprogram_head: FUNCTION ID @2 arguments . ':' standard_type ';'

    ':'  shift, and go to state 83


state 65

   17 subprogram_head: PROCEDURE ID @3 arguments . ';'

    ';'  shift, and go to state 84


state 66

   35 procedure_statement: ID '(' expression_list . ')'
   37 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 85
    ','  shift, and go to state 86


state 67

   36 expression_list: expression .

    $default  reduce using rule 36 (expression_list)


state 68

   33 variable: ID '[' expression . ']'

    ']'  shift, and go to state 87


state 69

   45 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression_list    go to state 88
    expression         go to state 67
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


state 70

   46 factor: ID '[' . expression_list ']'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression_list    go to state 89
    expression         go to state 67
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


state 71

   50 factor: NOT factor .

    $default  reduce using rule 50 (factor)


state 72

   49 factor: '(' expression . ')'

    ')'  shift, and go to state 90


state 73

   30 statement: IF expression THEN . statement ELSE statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 91
    variable             go to state 33
    procedure_statement  go to state 34


state 74

   39 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    simple_expression  go to state 92
    term               go to state 54
    factor             go to state 55


state 75

   41 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    term    go to state 93
    factor  go to state 55


state 76

   43 term: term MULOP . factor

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    factor  go to state 94


state 77

   31 statement: WHILE expression DO . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 95
    variable             go to state 33
    procedure_statement  go to state 34


state 78

   26 statement_list: statement_list ';' statement .

    $default  reduce using rule 26 (statement_list)


state 79

   27 statement: variable ASSIGNOP expression .

    $default  reduce using rule 27 (statement)


state 80

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 96


state 81

    4 identifier_list: identifier_list . ',' ID
   20 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 97


state 82

   18 arguments: '(' parameter_list . ')'
   21 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 98
    ';'  shift, and go to state 99


state 83

   15 subprogram_head: FUNCTION ID @2 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 100


state 84

   17 subprogram_head: PROCEDURE ID @3 arguments ';' .

    $default  reduce using rule 17 (subprogram_head)


state 85

   35 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 35 (procedure_statement)


state 86

   37 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 101
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


state 87

   33 variable: ID '[' expression ']' .

    $default  reduce using rule 33 (variable)


state 88

   37 expression_list: expression_list . ',' expression
   45 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 102
    ','  shift, and go to state 86


state 89

   37 expression_list: expression_list . ',' expression
   46 factor: ID '[' expression_list . ']'

    ','  shift, and go to state 86
    ']'  shift, and go to state 103


state 90

   49 factor: '(' expression ')' .

    $default  reduce using rule 49 (factor)


state 91

   30 statement: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 104


state 92

   39 expression: simple_expression RELOP simple_expression .
   41 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 75

    $default  reduce using rule 39 (expression)


state 93

   41 simple_expression: simple_expression ADDOP term .
   43 term: term . MULOP factor

    MULOP  shift, and go to state 76

    $default  reduce using rule 41 (simple_expression)


state 94

   43 term: term MULOP factor .

    $default  reduce using rule 43 (term)


state 95

   31 statement: WHILE expression DO statement .

    $default  reduce using rule 31 (statement)


state 96

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 105


state 97

   20 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 106
    standard_type  go to state 42


state 98

   18 arguments: '(' parameter_list ')' .

    $default  reduce using rule 18 (arguments)


state 99

   21 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 107


state 100

   15 subprogram_head: FUNCTION ID @2 arguments ':' standard_type . ';'

    ';'  shift, and go to state 108


state 101

   37 expression_list: expression_list ',' expression .

    $default  reduce using rule 37 (expression_list)


state 102

   45 factor: ID '(' expression_list ')' .

    $default  reduce using rule 45 (factor)


state 103

   46 factor: ID '[' expression_list ']' .

    $default  reduce using rule 46 (factor)


state 104

   30 statement: IF expression THEN statement ELSE . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 109
    variable             go to state 33
    procedure_statement  go to state 34


state 105

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 110


state 106

   20 parameter_list: identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)


state 107

    4 identifier_list: identifier_list . ',' ID
   21 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 111


state 108

   15 subprogram_head: FUNCTION ID @2 arguments ':' standard_type ';' .

    $default  reduce using rule 15 (subprogram_head)


state 109

   30 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 30 (statement)


state 110

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 112


state 111

   21 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 113
    standard_type  go to state 42


state 112

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 114


state 113

   21 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 21 (parameter_list)


state 114

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)
