Terminals which are not used

   NUMBER
   LT
   LE
   GT
   GE
   EQ
   NEQ
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   DIV
   MOD
   EMTPY
   CONDITIONAL
   TYPE
   LIST
   ARRAY_ACCESS
   STATEMENT
   FUNCTION_CALL
   PROCEDURE_CALL
   WHILE_DO
   DECL
   SUBDECL
   SUBPROGDECL
   LOCAL
   PARAMETER
   IDLIST
   EXPR
   EXPRLIST
   PARALIST
   ARGLIST
   DECLIST
   STATLIST
   PROCSTAT
   COMPSTAT


State 104 conflicts: 1 shift/reduce
State 105 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 @1: /* empty */

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | /* empty */

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL
   11              | CHAR
   12              | STRING
   13              | BOOLEAN

   14 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   15                        | /* empty */

   16 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   17 @2: /* empty */

   18 subprogram_head: FUNCTION ID @2 arguments ':' standard_type ';'

   19 @3: /* empty */

   20 subprogram_head: PROCEDURE ID @3 arguments ';'

   21 arguments: '(' parameter_list ')'
   22          | /* empty */

   23 parameter_list: identifier_list ':' type
   24               | parameter_list ';' identifier_list ':' type

   25 compound_statement: BBEGIN optional_statements END

   26 optional_statements: statement_list
   27                    | /* empty */

   28 statement_list: statement
   29               | statement_list ';' statement

   30 statement: conditions
   31          | ifelse

   32 conditions: variable ASSIGNOP expression
   33           | procedure_statement
   34           | compound_statement
   35           | IF expression THEN statement ELSE statement
   36           | WHILE expression DO statement
   37           | FOR ID ASSIGNOP expression TO expression DO conditions

   38 ifelse: IF expression THEN statement
   39       | IF expression THEN conditions ELSE ifelse

   40 variable: ID
   41         | ID '[' expression ']'

   42 procedure_statement: ID
   43                    | ID '(' expression_list ')'

   44 expression_list: expression
   45                | expression_list ',' expression

   46 expression: simple_expression
   47           | simple_expression RELOP simple_expression

   48 simple_expression: term
   49                  | sign term
   50                  | simple_expression ADDOP term

   51 term: factor
   52     | term MULOP factor

   53 factor: ID
   54       | ID '(' expression_list ')'
   55       | ID '[' expression_list ']'
   56       | INUM
   57       | RNUM
   58       | '(' expression ')'
   59       | NOT factor

   60 sign: '+'
   61     | '-'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 21 43 54 58
')' (41) 2 21 43 54 58
'+' (43) 60
',' (44) 4 45
'-' (45) 61
'.' (46) 2
':' (58) 5 18 23 24
';' (59) 2 5 14 18 20 24 29
'[' (91) 8 41 55
']' (93) 8 41 55
error (256)
NUMBER (258)
INUM (259) 8 56
RNUM (260) 57
ID (261) 2 3 4 18 20 37 40 41 42 43 53 54 55
NOT (262) 59
ASSIGNOP (263) 32 37
RELOP (264) 47
LT (265)
LE (266)
GT (267)
GE (268)
EQ (269)
NEQ (270)
ADDOP (271) 50
OR (272)
PLUS (273)
MINUS (274)
MULOP (275) 52
AND (276)
STAR (277)
SLASH (278)
DIV (279)
MOD (280)
PROGRAM (281) 2
VAR (282) 5
ARRAY (283) 8
OF (284) 8
DOTDOT (285) 8
INTEGER (286) 9
REAL (287) 10
CHAR (288) 11
STRING (289) 12
BOOLEAN (290) 13
FUNCTION (291) 18
PROCEDURE (292) 20
BBEGIN (293) 25
END (294) 25
IF (295) 35 38 39
THEN (296) 35 38 39
ELSE (297) 35 39
WHILE (298) 36
DO (299) 36 37
FOR (300) 37
TO (301) 37
EMTPY (302)
CONDITIONAL (303)
TYPE (304)
LIST (305)
ARRAY_ACCESS (306)
STATEMENT (307)
FUNCTION_CALL (308)
PROCEDURE_CALL (309)
WHILE_DO (310)
DECL (311)
SUBDECL (312)
SUBPROGDECL (313)
LOCAL (314)
PARAMETER (315)
IDLIST (316)
EXPR (317)
EXPRLIST (318)
PARALIST (319)
ARGLIST (320)
DECLIST (321)
STATLIST (322)
PROCSTAT (323)
COMPSTAT (324)


Nonterminals, with rules where they appear

$accept (80)
    on left: 0
program (81)
    on left: 2, on right: 0
@1 (82)
    on left: 1, on right: 2
identifier_list (83)
    on left: 3 4, on right: 2 4 5 23 24
declarations (84)
    on left: 5 6, on right: 2 5 16
type (85)
    on left: 7 8, on right: 5 23 24
standard_type (86)
    on left: 9 10 11 12 13, on right: 7 8 18
subprogram_declarations (87)
    on left: 14 15, on right: 2 14 16
subprogram_declaration (88)
    on left: 16, on right: 14
subprogram_head (89)
    on left: 18 20, on right: 16
@2 (90)
    on left: 17, on right: 18
@3 (91)
    on left: 19, on right: 20
arguments (92)
    on left: 21 22, on right: 18 20
parameter_list (93)
    on left: 23 24, on right: 21 24
compound_statement (94)
    on left: 25, on right: 2 16 34
optional_statements (95)
    on left: 26 27, on right: 25
statement_list (96)
    on left: 28 29, on right: 26 29
statement (97)
    on left: 30 31, on right: 28 29 35 36 38
conditions (98)
    on left: 32 33 34 35 36 37, on right: 30 37 39
ifelse (99)
    on left: 38 39, on right: 31 39
variable (100)
    on left: 40 41, on right: 32
procedure_statement (101)
    on left: 42 43, on right: 33
expression_list (102)
    on left: 44 45, on right: 43 45 54 55
expression (103)
    on left: 46 47, on right: 32 35 36 37 38 39 41 44 45 58
simple_expression (104)
    on left: 48 49 50, on right: 46 47 50
term (105)
    on left: 51 52, on right: 48 49 50 52
factor (106)
    on left: 53 54 55 56 57 58 59, on right: 51 52 59
sign (107)
    on left: 60 61, on right: 49


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 (@1)

    program  go to state 1
    @1       go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: @1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    2 program: @1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


state 5

    2 program: @1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


state 6

    2 program: @1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


state 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


state 8

    2 program: @1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


state 9

    2 program: @1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


state 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


state 11

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


state 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


state 13

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 15 (subprogram_declarations)

    subprogram_declarations  go to state 15


state 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


state 15

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   14 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 22


state 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


state 17

   18 subprogram_head: FUNCTION . ID @2 arguments ':' standard_type ';'

    ID  shift, and go to state 24


state 18

   20 subprogram_head: PROCEDURE . ID @3 arguments ';'

    ID  shift, and go to state 25


state 19

   25 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    $default  reduce using rule 27 (optional_statements)

    compound_statement   go to state 30
    optional_statements  go to state 31
    statement_list       go to state 32
    statement            go to state 33
    conditions           go to state 34
    ifelse               go to state 35
    variable             go to state 36
    procedure_statement  go to state 37


state 20

   14 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 38


state 21

   16 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 39


state 22

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 40


state 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 41
    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43
    CHAR     shift, and go to state 44
    STRING   shift, and go to state 45
    BOOLEAN  shift, and go to state 46

    type           go to state 47
    standard_type  go to state 48


state 24

   18 subprogram_head: FUNCTION ID . @2 arguments ':' standard_type ';'

    $default  reduce using rule 17 (@2)

    @2  go to state 49


state 25

   20 subprogram_head: PROCEDURE ID . @3 arguments ';'

    $default  reduce using rule 19 (@3)

    @3  go to state 50


state 26

   40 variable: ID .
   41         | ID . '[' expression ']'
   42 procedure_statement: ID .
   43                    | ID . '(' expression_list ')'

    '('  shift, and go to state 51
    '['  shift, and go to state 52

    ASSIGNOP  reduce using rule 40 (variable)
    $default  reduce using rule 42 (procedure_statement)


state 27

   35 conditions: IF . expression THEN statement ELSE statement
   38 ifelse: IF . expression THEN statement
   39       | IF . expression THEN conditions ELSE ifelse

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression         go to state 60
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 28

   36 conditions: WHILE . expression DO statement

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression         go to state 65
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 29

   37 conditions: FOR . ID ASSIGNOP expression TO expression DO conditions

    ID  shift, and go to state 66


state 30

   34 conditions: compound_statement .

    $default  reduce using rule 34 (conditions)


state 31

   25 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 67


state 32

   26 optional_statements: statement_list .
   29 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 68

    $default  reduce using rule 26 (optional_statements)


state 33

   28 statement_list: statement .

    $default  reduce using rule 28 (statement_list)


state 34

   30 statement: conditions .

    $default  reduce using rule 30 (statement)


state 35

   31 statement: ifelse .

    $default  reduce using rule 31 (statement)


state 36

   32 conditions: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 69


state 37

   33 conditions: procedure_statement .

    $default  reduce using rule 33 (conditions)


state 38

   14 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 14 (subprogram_declarations)


state 39

    5 declarations: declarations . VAR identifier_list ':' type ';'
   16 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 15 (subprogram_declarations)

    subprogram_declarations  go to state 70


state 40

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


state 41

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 71


state 42

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


state 43

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


state 44

   11 standard_type: CHAR .

    $default  reduce using rule 11 (standard_type)


state 45

   12 standard_type: STRING .

    $default  reduce using rule 12 (standard_type)


state 46

   13 standard_type: BOOLEAN .

    $default  reduce using rule 13 (standard_type)


state 47

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 72


state 48

    7 type: standard_type .

    $default  reduce using rule 7 (type)


state 49

   18 subprogram_head: FUNCTION ID @2 . arguments ':' standard_type ';'

    '('  shift, and go to state 73

    $default  reduce using rule 22 (arguments)

    arguments  go to state 74


state 50

   20 subprogram_head: PROCEDURE ID @3 . arguments ';'

    '('  shift, and go to state 73

    $default  reduce using rule 22 (arguments)

    arguments  go to state 75


state 51

   43 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression_list    go to state 76
    expression         go to state 77
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 52

   41 variable: ID '[' . expression ']'

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression         go to state 78
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 53

   56 factor: INUM .

    $default  reduce using rule 56 (factor)


state 54

   57 factor: RNUM .

    $default  reduce using rule 57 (factor)


state 55

   53 factor: ID .
   54       | ID . '(' expression_list ')'
   55       | ID . '[' expression_list ']'

    '('  shift, and go to state 79
    '['  shift, and go to state 80

    $default  reduce using rule 53 (factor)


state 56

   59 factor: NOT . factor

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57

    factor  go to state 81


state 57

   58 factor: '(' . expression ')'

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression         go to state 82
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 58

   60 sign: '+' .

    $default  reduce using rule 60 (sign)


state 59

   61 sign: '-' .

    $default  reduce using rule 61 (sign)


state 60

   35 conditions: IF expression . THEN statement ELSE statement
   38 ifelse: IF expression . THEN statement
   39       | IF expression . THEN conditions ELSE ifelse

    THEN  shift, and go to state 83


state 61

   46 expression: simple_expression .
   47           | simple_expression . RELOP simple_expression
   50 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 84
    ADDOP  shift, and go to state 85

    $default  reduce using rule 46 (expression)


state 62

   48 simple_expression: term .
   52 term: term . MULOP factor

    MULOP  shift, and go to state 86

    $default  reduce using rule 48 (simple_expression)


state 63

   51 term: factor .

    $default  reduce using rule 51 (term)


state 64

   49 simple_expression: sign . term

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57

    term    go to state 87
    factor  go to state 63


state 65

   36 conditions: WHILE expression . DO statement

    DO  shift, and go to state 88


state 66

   37 conditions: FOR ID . ASSIGNOP expression TO expression DO conditions

    ASSIGNOP  shift, and go to state 89


state 67

   25 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 25 (compound_statement)


state 68

   29 statement_list: statement_list ';' . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    statement            go to state 90
    conditions           go to state 34
    ifelse               go to state 35
    variable             go to state 36
    procedure_statement  go to state 37


state 69

   32 conditions: variable ASSIGNOP . expression

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression         go to state 91
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 70

   14 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   16 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 92


state 71

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 93


state 72

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


state 73

   21 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 94
    parameter_list   go to state 95


state 74

   18 subprogram_head: FUNCTION ID @2 arguments . ':' standard_type ';'

    ':'  shift, and go to state 96


state 75

   20 subprogram_head: PROCEDURE ID @3 arguments . ';'

    ';'  shift, and go to state 97


state 76

   43 procedure_statement: ID '(' expression_list . ')'
   45 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 98
    ','  shift, and go to state 99


state 77

   44 expression_list: expression .

    $default  reduce using rule 44 (expression_list)


state 78

   41 variable: ID '[' expression . ']'

    ']'  shift, and go to state 100


state 79

   54 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression_list    go to state 101
    expression         go to state 77
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 80

   55 factor: ID '[' . expression_list ']'

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression_list    go to state 102
    expression         go to state 77
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 81

   59 factor: NOT factor .

    $default  reduce using rule 59 (factor)


state 82

   58 factor: '(' expression . ')'

    ')'  shift, and go to state 103


state 83

   35 conditions: IF expression THEN . statement ELSE statement
   38 ifelse: IF expression THEN . statement
   39       | IF expression THEN . conditions ELSE ifelse

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    statement            go to state 104
    conditions           go to state 105
    ifelse               go to state 35
    variable             go to state 36
    procedure_statement  go to state 37


state 84

   47 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    simple_expression  go to state 106
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 85

   50 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57

    term    go to state 107
    factor  go to state 63


state 86

   52 term: term MULOP . factor

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57

    factor  go to state 108


state 87

   49 simple_expression: sign term .
   52 term: term . MULOP factor

    MULOP  shift, and go to state 86

    $default  reduce using rule 49 (simple_expression)


state 88

   36 conditions: WHILE expression DO . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    statement            go to state 109
    conditions           go to state 34
    ifelse               go to state 35
    variable             go to state 36
    procedure_statement  go to state 37


state 89

   37 conditions: FOR ID ASSIGNOP . expression TO expression DO conditions

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression         go to state 110
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 90

   29 statement_list: statement_list ';' statement .

    $default  reduce using rule 29 (statement_list)


state 91

   32 conditions: variable ASSIGNOP expression .

    $default  reduce using rule 32 (conditions)


state 92

   16 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 16 (subprogram_declaration)


state 93

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 111


state 94

    4 identifier_list: identifier_list . ',' ID
   23 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 112


state 95

   21 arguments: '(' parameter_list . ')'
   24 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 113
    ';'  shift, and go to state 114


state 96

   18 subprogram_head: FUNCTION ID @2 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43
    CHAR     shift, and go to state 44
    STRING   shift, and go to state 45
    BOOLEAN  shift, and go to state 46

    standard_type  go to state 115


state 97

   20 subprogram_head: PROCEDURE ID @3 arguments ';' .

    $default  reduce using rule 20 (subprogram_head)


state 98

   43 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 43 (procedure_statement)


state 99

   45 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression         go to state 116
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 100

   41 variable: ID '[' expression ']' .

    $default  reduce using rule 41 (variable)


state 101

   45 expression_list: expression_list . ',' expression
   54 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 117
    ','  shift, and go to state 99


state 102

   45 expression_list: expression_list . ',' expression
   55 factor: ID '[' expression_list . ']'

    ','  shift, and go to state 99
    ']'  shift, and go to state 118


state 103

   58 factor: '(' expression ')' .

    $default  reduce using rule 58 (factor)


state 104

   35 conditions: IF expression THEN statement . ELSE statement
   38 ifelse: IF expression THEN statement .

    ELSE  shift, and go to state 119

    ELSE      [reduce using rule 38 (ifelse)]
    $default  reduce using rule 38 (ifelse)


state 105

   30 statement: conditions .
   39 ifelse: IF expression THEN conditions . ELSE ifelse

    ELSE  shift, and go to state 120

    ELSE      [reduce using rule 30 (statement)]
    $default  reduce using rule 30 (statement)


state 106

   47 expression: simple_expression RELOP simple_expression .
   50 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 85

    $default  reduce using rule 47 (expression)


state 107

   50 simple_expression: simple_expression ADDOP term .
   52 term: term . MULOP factor

    MULOP  shift, and go to state 86

    $default  reduce using rule 50 (simple_expression)


state 108

   52 term: term MULOP factor .

    $default  reduce using rule 52 (term)


state 109

   36 conditions: WHILE expression DO statement .

    $default  reduce using rule 36 (conditions)


state 110

   37 conditions: FOR ID ASSIGNOP expression . TO expression DO conditions

    TO  shift, and go to state 121


state 111

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 122


state 112

   23 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 41
    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43
    CHAR     shift, and go to state 44
    STRING   shift, and go to state 45
    BOOLEAN  shift, and go to state 46

    type           go to state 123
    standard_type  go to state 48


state 113

   21 arguments: '(' parameter_list ')' .

    $default  reduce using rule 21 (arguments)


state 114

   24 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 124


state 115

   18 subprogram_head: FUNCTION ID @2 arguments ':' standard_type . ';'

    ';'  shift, and go to state 125


state 116

   45 expression_list: expression_list ',' expression .

    $default  reduce using rule 45 (expression_list)


state 117

   54 factor: ID '(' expression_list ')' .

    $default  reduce using rule 54 (factor)


state 118

   55 factor: ID '[' expression_list ']' .

    $default  reduce using rule 55 (factor)


state 119

   35 conditions: IF expression THEN statement ELSE . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    statement            go to state 126
    conditions           go to state 34
    ifelse               go to state 35
    variable             go to state 36
    procedure_statement  go to state 37


state 120

   39 ifelse: IF expression THEN conditions ELSE . ifelse

    IF  shift, and go to state 127

    ifelse  go to state 128


state 121

   37 conditions: FOR ID ASSIGNOP expression TO . expression DO conditions

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression         go to state 129
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 122

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 130


state 123

   23 parameter_list: identifier_list ':' type .

    $default  reduce using rule 23 (parameter_list)


state 124

    4 identifier_list: identifier_list . ',' ID
   24 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 131


state 125

   18 subprogram_head: FUNCTION ID @2 arguments ':' standard_type ';' .

    $default  reduce using rule 18 (subprogram_head)


state 126

   35 conditions: IF expression THEN statement ELSE statement .

    $default  reduce using rule 35 (conditions)


state 127

   38 ifelse: IF . expression THEN statement
   39       | IF . expression THEN conditions ELSE ifelse

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression         go to state 132
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 128

   39 ifelse: IF expression THEN conditions ELSE ifelse .

    $default  reduce using rule 39 (ifelse)


state 129

   37 conditions: FOR ID ASSIGNOP expression TO expression . DO conditions

    DO  shift, and go to state 133


state 130

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 134


state 131

   24 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 41
    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43
    CHAR     shift, and go to state 44
    STRING   shift, and go to state 45
    BOOLEAN  shift, and go to state 46

    type           go to state 135
    standard_type  go to state 48


state 132

   38 ifelse: IF expression . THEN statement
   39       | IF expression . THEN conditions ELSE ifelse

    THEN  shift, and go to state 136


state 133

   37 conditions: FOR ID ASSIGNOP expression TO expression DO . conditions

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 137
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    conditions           go to state 138
    variable             go to state 36
    procedure_statement  go to state 37


state 134

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43
    CHAR     shift, and go to state 44
    STRING   shift, and go to state 45
    BOOLEAN  shift, and go to state 46

    standard_type  go to state 139


state 135

   24 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 24 (parameter_list)


state 136

   38 ifelse: IF expression THEN . statement
   39       | IF expression THEN . conditions ELSE ifelse

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    statement            go to state 140
    conditions           go to state 105
    ifelse               go to state 35
    variable             go to state 36
    procedure_statement  go to state 37


state 137

   35 conditions: IF . expression THEN statement ELSE statement

    INUM  shift, and go to state 53
    RNUM  shift, and go to state 54
    ID    shift, and go to state 55
    NOT   shift, and go to state 56
    '('   shift, and go to state 57
    '+'   shift, and go to state 58
    '-'   shift, and go to state 59

    expression         go to state 141
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63
    sign               go to state 64


state 138

   37 conditions: FOR ID ASSIGNOP expression TO expression DO conditions .

    $default  reduce using rule 37 (conditions)


state 139

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)


state 140

   38 ifelse: IF expression THEN statement .

    $default  reduce using rule 38 (ifelse)


state 141

   35 conditions: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 142


state 142

   35 conditions: IF expression THEN . statement ELSE statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    statement            go to state 143
    conditions           go to state 34
    ifelse               go to state 35
    variable             go to state 36
    procedure_statement  go to state 37


state 143

   35 conditions: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 119
