Terminals which are not used

   NUMBER
   LT
   LE
   GT
   GE
   EQ
   NEQ
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   DIV
   MOD
   CHAR
   STRING
   BOOLEAN
   EMTPY
   CONDITIONAL
   TYPE
   NAME
   LIST
   ARRAY_ACCESS
   ARRAY_RANGE
   STATEMENT
   FUNCTION_CALL
   PROCEDURE_CALL
   WHILE_DO
   DECL
   SUBDECL
   SUBDECLS
   SUBPROGDECL
   SUBPROGDECLHEAD
   SUBPROGDECLBODY
   LOCAL
   PARAMETER
   IDLIST
   EXPR
   EXPRLIST
   PARALIST
   ARGLIST
   DECLIST
   STATLIST
   PROCSTAT
   COMPSTAT
   FROM


Grammar

    0 $accept: program $end

    1 @1: /* empty */

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | /* empty */

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | /* empty */

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   14 @2: /* empty */

   15 subprogram_head: FUNCTION ID @2 arguments ':' standard_type ';'

   16 @3: /* empty */

   17 subprogram_head: PROCEDURE ID @3 arguments ';'

   18 arguments: '(' parameter_list ')'
   19          | /* empty */

   20 parameter_list: identifier_list ':' type
   21               | parameter_list ';' identifier_list ':' type

   22 compound_statement: BBEGIN optional_statements END

   23 optional_statements: statement_list
   24                    | /* empty */

   25 statement_list: statement
   26               | statement_list ';' statement

   27 statement: conditions
   28          | ifelse

   29 conditions: variable ASSIGNOP expression
   30           | procedure_statement
   31           | compound_statement
   32           | IF expression THEN conditions ELSE conditions
   33           | WHILE expression DO conditions
   34           | FOR ID ASSIGNOP expression TO expression DO conditions

   35 ifelse: IF expression THEN statement
   36       | IF expression THEN conditions ELSE ifelse

   37 variable: ID
   38         | ID '[' expression ']'

   39 procedure_statement: ID
   40                    | ID '(' expression_list ')'
   41                    | WRITE '(' expression_list ')'
   42                    | READ '(' expression_list ')'

   43 expression_list: expression
   44                | expression_list ',' expression

   45 expression: simple_expression
   46           | simple_expression RELOP simple_expression

   47 simple_expression: term
   48                  | ADDOP term
   49                  | simple_expression ADDOP term

   50 term: factor
   51     | term MULOP factor

   52 factor: ID
   53       | ID '(' expression_list ')'
   54       | ID '[' expression_list ']'
   55       | INUM
   56       | RNUM
   57       | '(' expression ')'
   58       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 18 40 41 42 53 57
')' (41) 2 18 40 41 42 53 57
',' (44) 4 44
'.' (46) 2
':' (58) 5 15 20 21
';' (59) 2 5 11 15 17 21 26
'[' (91) 8 38 54
']' (93) 8 38 54
error (256)
NUMBER (258)
INUM (259) 8 55
RNUM (260) 56
ID (261) 2 3 4 15 17 34 37 38 39 40 52 53 54
NOT (262) 58
ASSIGNOP (263) 29 34
RELOP (264) 46
LT (265)
LE (266)
GT (267)
GE (268)
EQ (269)
NEQ (270)
ADDOP (271) 48 49
OR (272)
PLUS (273)
MINUS (274)
MULOP (275) 51
AND (276)
STAR (277)
SLASH (278)
DIV (279)
MOD (280)
PROGRAM (281) 2
VAR (282) 5
ARRAY (283) 8
OF (284) 8
DOTDOT (285) 8
INTEGER (286) 9
REAL (287) 10
CHAR (288)
STRING (289)
BOOLEAN (290)
FUNCTION (291) 15
PROCEDURE (292) 17
READ (293) 42
WRITE (294) 41
BBEGIN (295) 22
END (296) 22
IF (297) 32 35 36
THEN (298) 32 35 36
ELSE (299) 32 36
WHILE (300) 33
DO (301) 33 34
FOR (302) 34
TO (303) 34
EMTPY (304)
CONDITIONAL (305)
TYPE (306)
NAME (307)
LIST (308)
ARRAY_ACCESS (309)
ARRAY_RANGE (310)
STATEMENT (311)
FUNCTION_CALL (312)
PROCEDURE_CALL (313)
WHILE_DO (314)
DECL (315)
SUBDECL (316)
SUBDECLS (317)
SUBPROGDECL (318)
SUBPROGDECLHEAD (319)
SUBPROGDECLBODY (320)
LOCAL (321)
PARAMETER (322)
IDLIST (323)
EXPR (324)
EXPRLIST (325)
PARALIST (326)
ARGLIST (327)
DECLIST (328)
STATLIST (329)
PROCSTAT (330)
COMPSTAT (331)
FROM (332)


Nonterminals, with rules where they appear

$accept (86)
    on left: 0
program (87)
    on left: 2, on right: 0
@1 (88)
    on left: 1, on right: 2
identifier_list (89)
    on left: 3 4, on right: 2 4 5 20 21
declarations (90)
    on left: 5 6, on right: 2 5 13
type (91)
    on left: 7 8, on right: 5 20 21
standard_type (92)
    on left: 9 10, on right: 7 8 15
subprogram_declarations (93)
    on left: 11 12, on right: 2 11 13
subprogram_declaration (94)
    on left: 13, on right: 11
subprogram_head (95)
    on left: 15 17, on right: 13
@2 (96)
    on left: 14, on right: 15
@3 (97)
    on left: 16, on right: 17
arguments (98)
    on left: 18 19, on right: 15 17
parameter_list (99)
    on left: 20 21, on right: 18 21
compound_statement (100)
    on left: 22, on right: 2 13 31
optional_statements (101)
    on left: 23 24, on right: 22
statement_list (102)
    on left: 25 26, on right: 23 26
statement (103)
    on left: 27 28, on right: 25 26 35
conditions (104)
    on left: 29 30 31 32 33 34, on right: 27 32 33 34 36
ifelse (105)
    on left: 35 36, on right: 28 36
variable (106)
    on left: 37 38, on right: 29
procedure_statement (107)
    on left: 39 40 41 42, on right: 30
expression_list (108)
    on left: 43 44, on right: 40 41 42 44 53 54
expression (109)
    on left: 45 46, on right: 29 32 33 34 35 36 38 43 44 57
simple_expression (110)
    on left: 47 48 49, on right: 45 46 49
term (111)
    on left: 50 51, on right: 47 48 49 51
factor (112)
    on left: 52 53 54 55 56 57 58, on right: 50 51 58


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 (@1)

    program  go to state 1
    @1       go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: @1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    2 program: @1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


state 5

    2 program: @1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


state 6

    2 program: @1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


state 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


state 8

    2 program: @1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


state 9

    2 program: @1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


state 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


state 11

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


state 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


state 13

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 15


state 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


state 15

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 22


state 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


state 17

   15 subprogram_head: FUNCTION . ID @2 arguments ':' standard_type ';'

    ID  shift, and go to state 24


state 18

   17 subprogram_head: PROCEDURE . ID @3 arguments ';'

    ID  shift, and go to state 25


state 19

   22 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 29
    WHILE   shift, and go to state 30
    FOR     shift, and go to state 31

    $default  reduce using rule 24 (optional_statements)

    compound_statement   go to state 32
    optional_statements  go to state 33
    statement_list       go to state 34
    statement            go to state 35
    conditions           go to state 36
    ifelse               go to state 37
    variable             go to state 38
    procedure_statement  go to state 39


state 20

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 40


state 21

   13 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 41


state 22

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 42


state 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 43
    INTEGER  shift, and go to state 44
    REAL     shift, and go to state 45

    type           go to state 46
    standard_type  go to state 47


state 24

   15 subprogram_head: FUNCTION ID . @2 arguments ':' standard_type ';'

    $default  reduce using rule 14 (@2)

    @2  go to state 48


state 25

   17 subprogram_head: PROCEDURE ID . @3 arguments ';'

    $default  reduce using rule 16 (@3)

    @3  go to state 49


state 26

   37 variable: ID .
   38         | ID . '[' expression ']'
   39 procedure_statement: ID .
   40                    | ID . '(' expression_list ')'

    '('  shift, and go to state 50
    '['  shift, and go to state 51

    ASSIGNOP  reduce using rule 37 (variable)
    $default  reduce using rule 39 (procedure_statement)


state 27

   42 procedure_statement: READ . '(' expression_list ')'

    '('  shift, and go to state 52


state 28

   41 procedure_statement: WRITE . '(' expression_list ')'

    '('  shift, and go to state 53


state 29

   32 conditions: IF . expression THEN conditions ELSE conditions
   35 ifelse: IF . expression THEN statement
   36       | IF . expression THEN conditions ELSE ifelse

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression         go to state 60
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 30

   33 conditions: WHILE . expression DO conditions

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression         go to state 64
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 31

   34 conditions: FOR . ID ASSIGNOP expression TO expression DO conditions

    ID  shift, and go to state 65


state 32

   31 conditions: compound_statement .

    $default  reduce using rule 31 (conditions)


state 33

   22 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 66


state 34

   23 optional_statements: statement_list .
   26 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 67

    $default  reduce using rule 23 (optional_statements)


state 35

   25 statement_list: statement .

    $default  reduce using rule 25 (statement_list)


state 36

   27 statement: conditions .

    $default  reduce using rule 27 (statement)


state 37

   28 statement: ifelse .

    $default  reduce using rule 28 (statement)


state 38

   29 conditions: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 68


state 39

   30 conditions: procedure_statement .

    $default  reduce using rule 30 (conditions)


state 40

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


state 41

    5 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 69


state 42

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


state 43

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 70


state 44

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


state 45

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


state 46

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 71


state 47

    7 type: standard_type .

    $default  reduce using rule 7 (type)


state 48

   15 subprogram_head: FUNCTION ID @2 . arguments ':' standard_type ';'

    '('  shift, and go to state 72

    $default  reduce using rule 19 (arguments)

    arguments  go to state 73


state 49

   17 subprogram_head: PROCEDURE ID @3 . arguments ';'

    '('  shift, and go to state 72

    $default  reduce using rule 19 (arguments)

    arguments  go to state 74


state 50

   40 procedure_statement: ID '(' . expression_list ')'

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression_list    go to state 75
    expression         go to state 76
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 51

   38 variable: ID '[' . expression ']'

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression         go to state 77
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 52

   42 procedure_statement: READ '(' . expression_list ')'

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression_list    go to state 78
    expression         go to state 76
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 53

   41 procedure_statement: WRITE '(' . expression_list ')'

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression_list    go to state 79
    expression         go to state 76
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 54

   55 factor: INUM .

    $default  reduce using rule 55 (factor)


state 55

   56 factor: RNUM .

    $default  reduce using rule 56 (factor)


state 56

   52 factor: ID .
   53       | ID . '(' expression_list ')'
   54       | ID . '[' expression_list ']'

    '('  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 52 (factor)


state 57

   58 factor: NOT . factor

    INUM  shift, and go to state 54
    RNUM  shift, and go to state 55
    ID    shift, and go to state 56
    NOT   shift, and go to state 57
    '('   shift, and go to state 59

    factor  go to state 82


state 58

   48 simple_expression: ADDOP . term

    INUM  shift, and go to state 54
    RNUM  shift, and go to state 55
    ID    shift, and go to state 56
    NOT   shift, and go to state 57
    '('   shift, and go to state 59

    term    go to state 83
    factor  go to state 63


state 59

   57 factor: '(' . expression ')'

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression         go to state 84
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 60

   32 conditions: IF expression . THEN conditions ELSE conditions
   35 ifelse: IF expression . THEN statement
   36       | IF expression . THEN conditions ELSE ifelse

    THEN  shift, and go to state 85


state 61

   45 expression: simple_expression .
   46           | simple_expression . RELOP simple_expression
   49 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 86
    ADDOP  shift, and go to state 87

    $default  reduce using rule 45 (expression)


state 62

   47 simple_expression: term .
   51 term: term . MULOP factor

    MULOP  shift, and go to state 88

    $default  reduce using rule 47 (simple_expression)


state 63

   50 term: factor .

    $default  reduce using rule 50 (term)


state 64

   33 conditions: WHILE expression . DO conditions

    DO  shift, and go to state 89


state 65

   34 conditions: FOR ID . ASSIGNOP expression TO expression DO conditions

    ASSIGNOP  shift, and go to state 90


state 66

   22 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 22 (compound_statement)


state 67

   26 statement_list: statement_list ';' . statement

    ID      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 29
    WHILE   shift, and go to state 30
    FOR     shift, and go to state 31

    compound_statement   go to state 32
    statement            go to state 91
    conditions           go to state 36
    ifelse               go to state 37
    variable             go to state 38
    procedure_statement  go to state 39


state 68

   29 conditions: variable ASSIGNOP . expression

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression         go to state 92
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 69

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   13 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 93


state 70

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 94


state 71

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


state 72

   18 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 95
    parameter_list   go to state 96


state 73

   15 subprogram_head: FUNCTION ID @2 arguments . ':' standard_type ';'

    ':'  shift, and go to state 97


state 74

   17 subprogram_head: PROCEDURE ID @3 arguments . ';'

    ';'  shift, and go to state 98


state 75

   40 procedure_statement: ID '(' expression_list . ')'
   44 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 99
    ','  shift, and go to state 100


state 76

   43 expression_list: expression .

    $default  reduce using rule 43 (expression_list)


state 77

   38 variable: ID '[' expression . ']'

    ']'  shift, and go to state 101


state 78

   42 procedure_statement: READ '(' expression_list . ')'
   44 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 102
    ','  shift, and go to state 100


state 79

   41 procedure_statement: WRITE '(' expression_list . ')'
   44 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 103
    ','  shift, and go to state 100


state 80

   53 factor: ID '(' . expression_list ')'

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression_list    go to state 104
    expression         go to state 76
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 81

   54 factor: ID '[' . expression_list ']'

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression_list    go to state 105
    expression         go to state 76
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 82

   58 factor: NOT factor .

    $default  reduce using rule 58 (factor)


state 83

   48 simple_expression: ADDOP term .
   51 term: term . MULOP factor

    MULOP  shift, and go to state 88

    $default  reduce using rule 48 (simple_expression)


state 84

   57 factor: '(' expression . ')'

    ')'  shift, and go to state 106


state 85

   32 conditions: IF expression THEN . conditions ELSE conditions
   35 ifelse: IF expression THEN . statement
   36       | IF expression THEN . conditions ELSE ifelse

    ID      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 29
    WHILE   shift, and go to state 30
    FOR     shift, and go to state 31

    compound_statement   go to state 32
    statement            go to state 107
    conditions           go to state 108
    ifelse               go to state 37
    variable             go to state 38
    procedure_statement  go to state 39


state 86

   46 expression: simple_expression RELOP . simple_expression

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    simple_expression  go to state 109
    term               go to state 62
    factor             go to state 63


state 87

   49 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 54
    RNUM  shift, and go to state 55
    ID    shift, and go to state 56
    NOT   shift, and go to state 57
    '('   shift, and go to state 59

    term    go to state 110
    factor  go to state 63


state 88

   51 term: term MULOP . factor

    INUM  shift, and go to state 54
    RNUM  shift, and go to state 55
    ID    shift, and go to state 56
    NOT   shift, and go to state 57
    '('   shift, and go to state 59

    factor  go to state 111


state 89

   33 conditions: WHILE expression DO . conditions

    ID      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 112
    WHILE   shift, and go to state 30
    FOR     shift, and go to state 31

    compound_statement   go to state 32
    conditions           go to state 113
    variable             go to state 38
    procedure_statement  go to state 39


state 90

   34 conditions: FOR ID ASSIGNOP . expression TO expression DO conditions

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression         go to state 114
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 91

   26 statement_list: statement_list ';' statement .

    $default  reduce using rule 26 (statement_list)


state 92

   29 conditions: variable ASSIGNOP expression .

    $default  reduce using rule 29 (conditions)


state 93

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


state 94

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 115


state 95

    4 identifier_list: identifier_list . ',' ID
   20 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 116


state 96

   18 arguments: '(' parameter_list . ')'
   21 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 117
    ';'  shift, and go to state 118


state 97

   15 subprogram_head: FUNCTION ID @2 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 44
    REAL     shift, and go to state 45

    standard_type  go to state 119


state 98

   17 subprogram_head: PROCEDURE ID @3 arguments ';' .

    $default  reduce using rule 17 (subprogram_head)


state 99

   40 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 40 (procedure_statement)


state 100

   44 expression_list: expression_list ',' . expression

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression         go to state 120
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 101

   38 variable: ID '[' expression ']' .

    $default  reduce using rule 38 (variable)


state 102

   42 procedure_statement: READ '(' expression_list ')' .

    $default  reduce using rule 42 (procedure_statement)


state 103

   41 procedure_statement: WRITE '(' expression_list ')' .

    $default  reduce using rule 41 (procedure_statement)


state 104

   44 expression_list: expression_list . ',' expression
   53 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 121
    ','  shift, and go to state 100


state 105

   44 expression_list: expression_list . ',' expression
   54 factor: ID '[' expression_list . ']'

    ','  shift, and go to state 100
    ']'  shift, and go to state 122


state 106

   57 factor: '(' expression ')' .

    $default  reduce using rule 57 (factor)


state 107

   35 ifelse: IF expression THEN statement .

    $default  reduce using rule 35 (ifelse)


state 108

   27 statement: conditions .
   32 conditions: IF expression THEN conditions . ELSE conditions
   36 ifelse: IF expression THEN conditions . ELSE ifelse

    ELSE  shift, and go to state 123

    $default  reduce using rule 27 (statement)


state 109

   46 expression: simple_expression RELOP simple_expression .
   49 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 87

    $default  reduce using rule 46 (expression)


state 110

   49 simple_expression: simple_expression ADDOP term .
   51 term: term . MULOP factor

    MULOP  shift, and go to state 88

    $default  reduce using rule 49 (simple_expression)


state 111

   51 term: term MULOP factor .

    $default  reduce using rule 51 (term)


state 112

   32 conditions: IF . expression THEN conditions ELSE conditions

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression         go to state 124
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 113

   33 conditions: WHILE expression DO conditions .

    $default  reduce using rule 33 (conditions)


state 114

   34 conditions: FOR ID ASSIGNOP expression . TO expression DO conditions

    TO  shift, and go to state 125


state 115

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 126


state 116

   20 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 43
    INTEGER  shift, and go to state 44
    REAL     shift, and go to state 45

    type           go to state 127
    standard_type  go to state 47


state 117

   18 arguments: '(' parameter_list ')' .

    $default  reduce using rule 18 (arguments)


state 118

   21 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 128


state 119

   15 subprogram_head: FUNCTION ID @2 arguments ':' standard_type . ';'

    ';'  shift, and go to state 129


state 120

   44 expression_list: expression_list ',' expression .

    $default  reduce using rule 44 (expression_list)


state 121

   53 factor: ID '(' expression_list ')' .

    $default  reduce using rule 53 (factor)


state 122

   54 factor: ID '[' expression_list ']' .

    $default  reduce using rule 54 (factor)


state 123

   32 conditions: IF expression THEN conditions ELSE . conditions
   36 ifelse: IF expression THEN conditions ELSE . ifelse

    ID      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 29
    WHILE   shift, and go to state 30
    FOR     shift, and go to state 31

    compound_statement   go to state 32
    conditions           go to state 130
    ifelse               go to state 131
    variable             go to state 38
    procedure_statement  go to state 39


state 124

   32 conditions: IF expression . THEN conditions ELSE conditions

    THEN  shift, and go to state 132


state 125

   34 conditions: FOR ID ASSIGNOP expression TO . expression DO conditions

    INUM   shift, and go to state 54
    RNUM   shift, and go to state 55
    ID     shift, and go to state 56
    NOT    shift, and go to state 57
    ADDOP  shift, and go to state 58
    '('    shift, and go to state 59

    expression         go to state 133
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


state 126

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 134


state 127

   20 parameter_list: identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)


state 128

    4 identifier_list: identifier_list . ',' ID
   21 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 135


state 129

   15 subprogram_head: FUNCTION ID @2 arguments ':' standard_type ';' .

    $default  reduce using rule 15 (subprogram_head)


state 130

   32 conditions: IF expression THEN conditions ELSE conditions .

    $default  reduce using rule 32 (conditions)


state 131

   36 ifelse: IF expression THEN conditions ELSE ifelse .

    $default  reduce using rule 36 (ifelse)


state 132

   32 conditions: IF expression THEN . conditions ELSE conditions

    ID      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 112
    WHILE   shift, and go to state 30
    FOR     shift, and go to state 31

    compound_statement   go to state 32
    conditions           go to state 136
    variable             go to state 38
    procedure_statement  go to state 39


state 133

   34 conditions: FOR ID ASSIGNOP expression TO expression . DO conditions

    DO  shift, and go to state 137


state 134

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 138


state 135

   21 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 43
    INTEGER  shift, and go to state 44
    REAL     shift, and go to state 45

    type           go to state 139
    standard_type  go to state 47


state 136

   32 conditions: IF expression THEN conditions . ELSE conditions

    ELSE  shift, and go to state 140


state 137

   34 conditions: FOR ID ASSIGNOP expression TO expression DO . conditions

    ID      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 112
    WHILE   shift, and go to state 30
    FOR     shift, and go to state 31

    compound_statement   go to state 32
    conditions           go to state 141
    variable             go to state 38
    procedure_statement  go to state 39


state 138

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 44
    REAL     shift, and go to state 45

    standard_type  go to state 142


state 139

   21 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 21 (parameter_list)


state 140

   32 conditions: IF expression THEN conditions ELSE . conditions

    ID      shift, and go to state 26
    READ    shift, and go to state 27
    WRITE   shift, and go to state 28
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 112
    WHILE   shift, and go to state 30
    FOR     shift, and go to state 31

    compound_statement   go to state 32
    conditions           go to state 130
    variable             go to state 38
    procedure_statement  go to state 39


state 141

   34 conditions: FOR ID ASSIGNOP expression TO expression DO conditions .

    $default  reduce using rule 34 (conditions)


state 142

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)
