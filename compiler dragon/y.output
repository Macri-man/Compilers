Terminals which are not used

   NUMBER
   LT
   LE
   GT
   GE
   EQ
   NEQ
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   DIV
   MOD
   CHAR
   STRING
   BOOLEAN
   EMTPY
   CONDITIONAL
   TYPE
   NAME
   LIST
   ARRAY_ACCESS
   ARRAY_RANGE
   STATEMENT
   FUNCTION_CALL
   PROCEDURE_CALL
   WHILE_DO
   DECL
   SUBDECL
   SUBDECLS
   SUBPROGDECL
   SUBPROGDECLHEAD
   SUBPROGDECLBODY
   LOCAL
   PARAMETER
   IDLIST
   EXPR
   EXPRLIST
   PARALIST
   ARGLIST
   DECLIST
   STATLIST
   PROCSTAT
   COMPSTAT
   FROM


Grammar

    0 $accept: program $end

    1 @1: /* empty */

    2 @2: /* empty */

    3 @3: /* empty */

    4 program: PROGRAM ID @1 '(' identifier_list ')' ';' @2 declarations @3 subprogram_declarations compound_statement '.'

    5 identifier_list: ID
    6                | identifier_list ',' ID

    7 declarations: declarations VAR identifier_list ':' type ';'
    8             | /* empty */

    9 type: standard_type
   10     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

   11 standard_type: INTEGER
   12              | REAL

   13 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   14                        | /* empty */

   15 @4: /* empty */

   16 @5: /* empty */

   17 subprogram_declaration: subprogram_head @4 declarations @5 subprogram_declarations compound_statement

   18 @6: /* empty */

   19 subprogram_head: FUNCTION ID @6 arguments ':' standard_type ';'

   20 @7: /* empty */

   21 subprogram_head: PROCEDURE ID @7 arguments ';'

   22 @8: /* empty */

   23 arguments: @8 '(' parameter_list ')'
   24          | /* empty */

   25 parameter_list: identifier_list ':' type
   26               | parameter_list ';' identifier_list ':' type

   27 compound_statement: BBEGIN optional_statements END

   28 optional_statements: statement_list
   29                    | /* empty */

   30 statement_list: statement
   31               | statement_list ';' statement

   32 statement: conditions
   33          | ifelse

   34 conditions: variable ASSIGNOP expression
   35           | procedure_statement
   36           | compound_statement
   37           | IF expression THEN conditions ELSE conditions
   38           | WHILE expression DO conditions
   39           | FOR ID ASSIGNOP expression TO expression DO conditions

   40 ifelse: IF expression THEN statement
   41       | IF expression THEN conditions ELSE ifelse

   42 variable: ID
   43         | ID '[' expression ']'

   44 procedure_statement: ID
   45                    | ID '(' expression_list ')'
   46                    | WRITE '(' expression_list ')'
   47                    | READ '(' expression_list ')'

   48 expression_list: expression
   49                | expression_list ',' expression

   50 expression: simple_expression
   51           | simple_expression RELOP simple_expression

   52 simple_expression: term
   53                  | ADDOP term
   54                  | simple_expression ADDOP term

   55 term: factor
   56     | term MULOP factor

   57 factor: ID
   58       | ID '(' expression_list ')'
   59       | ID '[' expression_list ']'
   60       | INUM
   61       | RNUM
   62       | '(' expression ')'
   63       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 23 45 46 47 58 62
')' (41) 4 23 45 46 47 58 62
',' (44) 6 49
'.' (46) 4
':' (58) 7 19 25 26
';' (59) 4 7 13 19 21 26 31
'[' (91) 10 43 59
']' (93) 10 43 59
error (256)
NUMBER (258)
INUM (259) 10 60
RNUM (260) 61
ID (261) 4 5 6 19 21 39 42 43 44 45 57 58 59
NOT (262) 63
ASSIGNOP (263) 34 39
RELOP (264) 51
LT (265)
LE (266)
GT (267)
GE (268)
EQ (269)
NEQ (270)
ADDOP (271) 53 54
OR (272)
PLUS (273)
MINUS (274)
MULOP (275) 56
AND (276)
STAR (277)
SLASH (278)
DIV (279)
MOD (280)
PROGRAM (281) 4
VAR (282) 7
ARRAY (283) 10
OF (284) 10
DOTDOT (285) 10
INTEGER (286) 11
REAL (287) 12
CHAR (288)
STRING (289)
BOOLEAN (290)
FUNCTION (291) 19
PROCEDURE (292) 21
READ (293) 47
WRITE (294) 46
BBEGIN (295) 27
END (296) 27
IF (297) 37 40 41
THEN (298) 37 40 41
ELSE (299) 37 41
WHILE (300) 38
DO (301) 38 39
FOR (302) 39
TO (303) 39
EMTPY (304)
CONDITIONAL (305)
TYPE (306)
NAME (307)
LIST (308)
ARRAY_ACCESS (309)
ARRAY_RANGE (310)
STATEMENT (311)
FUNCTION_CALL (312)
PROCEDURE_CALL (313)
WHILE_DO (314)
DECL (315)
SUBDECL (316)
SUBDECLS (317)
SUBPROGDECL (318)
SUBPROGDECLHEAD (319)
SUBPROGDECLBODY (320)
LOCAL (321)
PARAMETER (322)
IDLIST (323)
EXPR (324)
EXPRLIST (325)
PARALIST (326)
ARGLIST (327)
DECLIST (328)
STATLIST (329)
PROCSTAT (330)
COMPSTAT (331)
FROM (332)


Nonterminals, with rules where they appear

$accept (86)
    on left: 0
program (87)
    on left: 4, on right: 0
@1 (88)
    on left: 1, on right: 4
@2 (89)
    on left: 2, on right: 4
@3 (90)
    on left: 3, on right: 4
identifier_list (91)
    on left: 5 6, on right: 4 6 7 25 26
declarations (92)
    on left: 7 8, on right: 4 7 17
type (93)
    on left: 9 10, on right: 7 25 26
standard_type (94)
    on left: 11 12, on right: 9 10 19
subprogram_declarations (95)
    on left: 13 14, on right: 4 13 17
subprogram_declaration (96)
    on left: 17, on right: 13
@4 (97)
    on left: 15, on right: 17
@5 (98)
    on left: 16, on right: 17
subprogram_head (99)
    on left: 19 21, on right: 17
@6 (100)
    on left: 18, on right: 19
@7 (101)
    on left: 20, on right: 21
arguments (102)
    on left: 23 24, on right: 19 21
@8 (103)
    on left: 22, on right: 23
parameter_list (104)
    on left: 25 26, on right: 23 26
compound_statement (105)
    on left: 27, on right: 4 17 36
optional_statements (106)
    on left: 28 29, on right: 27
statement_list (107)
    on left: 30 31, on right: 28 31
statement (108)
    on left: 32 33, on right: 30 31 40
conditions (109)
    on left: 34 35 36 37 38 39, on right: 32 37 38 39 41
ifelse (110)
    on left: 40 41, on right: 33 41
variable (111)
    on left: 42 43, on right: 34
procedure_statement (112)
    on left: 44 45 46 47, on right: 35
expression_list (113)
    on left: 48 49, on right: 45 46 47 49 58 59
expression (114)
    on left: 50 51, on right: 34 37 38 39 40 41 43 48 49 62
simple_expression (115)
    on left: 52 53 54, on right: 50 51 54
term (116)
    on left: 55 56, on right: 52 53 54 56
factor (117)
    on left: 57 58 59 60 61 62 63, on right: 55 56 63


state 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    4 program: PROGRAM . ID @1 '(' identifier_list ')' ';' @2 declarations @3 subprogram_declarations compound_statement '.'

    ID  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    4 program: PROGRAM ID . @1 '(' identifier_list ')' ';' @2 declarations @3 subprogram_declarations compound_statement '.'

    $default  reduce using rule 1 (@1)

    @1  go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    4 program: PROGRAM ID @1 . '(' identifier_list ')' ';' @2 declarations @3 subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


state 6

    4 program: PROGRAM ID @1 '(' . identifier_list ')' ';' @2 declarations @3 subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


state 7

    5 identifier_list: ID .

    $default  reduce using rule 5 (identifier_list)


state 8

    4 program: PROGRAM ID @1 '(' identifier_list . ')' ';' @2 declarations @3 subprogram_declarations compound_statement '.'
    6 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


state 9

    4 program: PROGRAM ID @1 '(' identifier_list ')' . ';' @2 declarations @3 subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


state 10

    6 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


state 11

    4 program: PROGRAM ID @1 '(' identifier_list ')' ';' . @2 declarations @3 subprogram_declarations compound_statement '.'

    $default  reduce using rule 2 (@2)

    @2  go to state 13


state 12

    6 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 6 (identifier_list)


state 13

    4 program: PROGRAM ID @1 '(' identifier_list ')' ';' @2 . declarations @3 subprogram_declarations compound_statement '.'

    $default  reduce using rule 8 (declarations)

    declarations  go to state 14


state 14

    4 program: PROGRAM ID @1 '(' identifier_list ')' ';' @2 declarations . @3 subprogram_declarations compound_statement '.'
    7 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 15

    $default  reduce using rule 3 (@3)

    @3  go to state 16


state 15

    7 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 17


state 16

    4 program: PROGRAM ID @1 '(' identifier_list ')' ';' @2 declarations @3 . subprogram_declarations compound_statement '.'

    $default  reduce using rule 14 (subprogram_declarations)

    subprogram_declarations  go to state 18


state 17

    6 identifier_list: identifier_list . ',' ID
    7 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 19


state 18

    4 program: PROGRAM ID @1 '(' identifier_list ')' ';' @2 declarations @3 subprogram_declarations . compound_statement '.'
   13 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 20
    PROCEDURE  shift, and go to state 21
    BBEGIN     shift, and go to state 22

    subprogram_declaration  go to state 23
    subprogram_head         go to state 24
    compound_statement      go to state 25


state 19

    7 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 26
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28

    type           go to state 29
    standard_type  go to state 30


state 20

   19 subprogram_head: FUNCTION . ID @6 arguments ':' standard_type ';'

    ID  shift, and go to state 31


state 21

   21 subprogram_head: PROCEDURE . ID @7 arguments ';'

    ID  shift, and go to state 32


state 22

   27 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 33
    READ    shift, and go to state 34
    WRITE   shift, and go to state 35
    BBEGIN  shift, and go to state 22
    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    FOR     shift, and go to state 38

    $default  reduce using rule 29 (optional_statements)

    compound_statement   go to state 39
    optional_statements  go to state 40
    statement_list       go to state 41
    statement            go to state 42
    conditions           go to state 43
    ifelse               go to state 44
    variable             go to state 45
    procedure_statement  go to state 46


state 23

   13 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 47


state 24

   17 subprogram_declaration: subprogram_head . @4 declarations @5 subprogram_declarations compound_statement

    $default  reduce using rule 15 (@4)

    @4  go to state 48


state 25

    4 program: PROGRAM ID @1 '(' identifier_list ')' ';' @2 declarations @3 subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 49


state 26

   10 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 50


state 27

   11 standard_type: INTEGER .

    $default  reduce using rule 11 (standard_type)


state 28

   12 standard_type: REAL .

    $default  reduce using rule 12 (standard_type)


state 29

    7 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 51


state 30

    9 type: standard_type .

    $default  reduce using rule 9 (type)


state 31

   19 subprogram_head: FUNCTION ID . @6 arguments ':' standard_type ';'

    $default  reduce using rule 18 (@6)

    @6  go to state 52


state 32

   21 subprogram_head: PROCEDURE ID . @7 arguments ';'

    $default  reduce using rule 20 (@7)

    @7  go to state 53


state 33

   42 variable: ID .
   43         | ID . '[' expression ']'
   44 procedure_statement: ID .
   45                    | ID . '(' expression_list ')'

    '('  shift, and go to state 54
    '['  shift, and go to state 55

    ASSIGNOP  reduce using rule 42 (variable)
    $default  reduce using rule 44 (procedure_statement)


state 34

   47 procedure_statement: READ . '(' expression_list ')'

    '('  shift, and go to state 56


state 35

   46 procedure_statement: WRITE . '(' expression_list ')'

    '('  shift, and go to state 57


state 36

   37 conditions: IF . expression THEN conditions ELSE conditions
   40 ifelse: IF . expression THEN statement
   41       | IF . expression THEN conditions ELSE ifelse

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression         go to state 64
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 37

   38 conditions: WHILE . expression DO conditions

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression         go to state 68
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 38

   39 conditions: FOR . ID ASSIGNOP expression TO expression DO conditions

    ID  shift, and go to state 69


state 39

   36 conditions: compound_statement .

    $default  reduce using rule 36 (conditions)


state 40

   27 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 70


state 41

   28 optional_statements: statement_list .
   31 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 71

    $default  reduce using rule 28 (optional_statements)


state 42

   30 statement_list: statement .

    $default  reduce using rule 30 (statement_list)


state 43

   32 statement: conditions .

    $default  reduce using rule 32 (statement)


state 44

   33 statement: ifelse .

    $default  reduce using rule 33 (statement)


state 45

   34 conditions: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 72


state 46

   35 conditions: procedure_statement .

    $default  reduce using rule 35 (conditions)


state 47

   13 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 13 (subprogram_declarations)


state 48

   17 subprogram_declaration: subprogram_head @4 . declarations @5 subprogram_declarations compound_statement

    $default  reduce using rule 8 (declarations)

    declarations  go to state 73


state 49

    4 program: PROGRAM ID @1 '(' identifier_list ')' ';' @2 declarations @3 subprogram_declarations compound_statement '.' .

    $default  reduce using rule 4 (program)


state 50

   10 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 74


state 51

    7 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 7 (declarations)


state 52

   19 subprogram_head: FUNCTION ID @6 . arguments ':' standard_type ';'

    ':'       reduce using rule 24 (arguments)
    $default  reduce using rule 22 (@8)

    arguments  go to state 75
    @8         go to state 76


state 53

   21 subprogram_head: PROCEDURE ID @7 . arguments ';'

    ';'       reduce using rule 24 (arguments)
    $default  reduce using rule 22 (@8)

    arguments  go to state 77
    @8         go to state 76


state 54

   45 procedure_statement: ID '(' . expression_list ')'

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression_list    go to state 78
    expression         go to state 79
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 55

   43 variable: ID '[' . expression ']'

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression         go to state 80
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 56

   47 procedure_statement: READ '(' . expression_list ')'

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression_list    go to state 81
    expression         go to state 79
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 57

   46 procedure_statement: WRITE '(' . expression_list ')'

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression_list    go to state 82
    expression         go to state 79
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 58

   60 factor: INUM .

    $default  reduce using rule 60 (factor)


state 59

   61 factor: RNUM .

    $default  reduce using rule 61 (factor)


state 60

   57 factor: ID .
   58       | ID . '(' expression_list ')'
   59       | ID . '[' expression_list ']'

    '('  shift, and go to state 83
    '['  shift, and go to state 84

    $default  reduce using rule 57 (factor)


state 61

   63 factor: NOT . factor

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 63

    factor  go to state 85


state 62

   53 simple_expression: ADDOP . term

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 63

    term    go to state 86
    factor  go to state 67


state 63

   62 factor: '(' . expression ')'

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression         go to state 87
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 64

   37 conditions: IF expression . THEN conditions ELSE conditions
   40 ifelse: IF expression . THEN statement
   41       | IF expression . THEN conditions ELSE ifelse

    THEN  shift, and go to state 88


state 65

   50 expression: simple_expression .
   51           | simple_expression . RELOP simple_expression
   54 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 89
    ADDOP  shift, and go to state 90

    $default  reduce using rule 50 (expression)


state 66

   52 simple_expression: term .
   56 term: term . MULOP factor

    MULOP  shift, and go to state 91

    $default  reduce using rule 52 (simple_expression)


state 67

   55 term: factor .

    $default  reduce using rule 55 (term)


state 68

   38 conditions: WHILE expression . DO conditions

    DO  shift, and go to state 92


state 69

   39 conditions: FOR ID . ASSIGNOP expression TO expression DO conditions

    ASSIGNOP  shift, and go to state 93


state 70

   27 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 27 (compound_statement)


state 71

   31 statement_list: statement_list ';' . statement

    ID      shift, and go to state 33
    READ    shift, and go to state 34
    WRITE   shift, and go to state 35
    BBEGIN  shift, and go to state 22
    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    FOR     shift, and go to state 38

    compound_statement   go to state 39
    statement            go to state 94
    conditions           go to state 43
    ifelse               go to state 44
    variable             go to state 45
    procedure_statement  go to state 46


state 72

   34 conditions: variable ASSIGNOP . expression

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression         go to state 95
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 73

    7 declarations: declarations . VAR identifier_list ':' type ';'
   17 subprogram_declaration: subprogram_head @4 declarations . @5 subprogram_declarations compound_statement

    VAR  shift, and go to state 15

    $default  reduce using rule 16 (@5)

    @5  go to state 96


state 74

   10 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 97


state 75

   19 subprogram_head: FUNCTION ID @6 arguments . ':' standard_type ';'

    ':'  shift, and go to state 98


state 76

   23 arguments: @8 . '(' parameter_list ')'

    '('  shift, and go to state 99


state 77

   21 subprogram_head: PROCEDURE ID @7 arguments . ';'

    ';'  shift, and go to state 100


state 78

   45 procedure_statement: ID '(' expression_list . ')'
   49 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 101
    ','  shift, and go to state 102


state 79

   48 expression_list: expression .

    $default  reduce using rule 48 (expression_list)


state 80

   43 variable: ID '[' expression . ']'

    ']'  shift, and go to state 103


state 81

   47 procedure_statement: READ '(' expression_list . ')'
   49 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 104
    ','  shift, and go to state 102


state 82

   46 procedure_statement: WRITE '(' expression_list . ')'
   49 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 105
    ','  shift, and go to state 102


state 83

   58 factor: ID '(' . expression_list ')'

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression_list    go to state 106
    expression         go to state 79
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 84

   59 factor: ID '[' . expression_list ']'

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression_list    go to state 107
    expression         go to state 79
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 85

   63 factor: NOT factor .

    $default  reduce using rule 63 (factor)


state 86

   53 simple_expression: ADDOP term .
   56 term: term . MULOP factor

    MULOP  shift, and go to state 91

    $default  reduce using rule 53 (simple_expression)


state 87

   62 factor: '(' expression . ')'

    ')'  shift, and go to state 108


state 88

   37 conditions: IF expression THEN . conditions ELSE conditions
   40 ifelse: IF expression THEN . statement
   41       | IF expression THEN . conditions ELSE ifelse

    ID      shift, and go to state 33
    READ    shift, and go to state 34
    WRITE   shift, and go to state 35
    BBEGIN  shift, and go to state 22
    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    FOR     shift, and go to state 38

    compound_statement   go to state 39
    statement            go to state 109
    conditions           go to state 110
    ifelse               go to state 44
    variable             go to state 45
    procedure_statement  go to state 46


state 89

   51 expression: simple_expression RELOP . simple_expression

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    simple_expression  go to state 111
    term               go to state 66
    factor             go to state 67


state 90

   54 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 63

    term    go to state 112
    factor  go to state 67


state 91

   56 term: term MULOP . factor

    INUM  shift, and go to state 58
    RNUM  shift, and go to state 59
    ID    shift, and go to state 60
    NOT   shift, and go to state 61
    '('   shift, and go to state 63

    factor  go to state 113


state 92

   38 conditions: WHILE expression DO . conditions

    ID      shift, and go to state 33
    READ    shift, and go to state 34
    WRITE   shift, and go to state 35
    BBEGIN  shift, and go to state 22
    IF      shift, and go to state 114
    WHILE   shift, and go to state 37
    FOR     shift, and go to state 38

    compound_statement   go to state 39
    conditions           go to state 115
    variable             go to state 45
    procedure_statement  go to state 46


state 93

   39 conditions: FOR ID ASSIGNOP . expression TO expression DO conditions

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression         go to state 116
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 94

   31 statement_list: statement_list ';' statement .

    $default  reduce using rule 31 (statement_list)


state 95

   34 conditions: variable ASSIGNOP expression .

    $default  reduce using rule 34 (conditions)


state 96

   17 subprogram_declaration: subprogram_head @4 declarations @5 . subprogram_declarations compound_statement

    $default  reduce using rule 14 (subprogram_declarations)

    subprogram_declarations  go to state 117


state 97

   10 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 118


state 98

   19 subprogram_head: FUNCTION ID @6 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28

    standard_type  go to state 119


state 99

   23 arguments: @8 '(' . parameter_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 120
    parameter_list   go to state 121


state 100

   21 subprogram_head: PROCEDURE ID @7 arguments ';' .

    $default  reduce using rule 21 (subprogram_head)


state 101

   45 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 45 (procedure_statement)


state 102

   49 expression_list: expression_list ',' . expression

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression         go to state 122
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 103

   43 variable: ID '[' expression ']' .

    $default  reduce using rule 43 (variable)


state 104

   47 procedure_statement: READ '(' expression_list ')' .

    $default  reduce using rule 47 (procedure_statement)


state 105

   46 procedure_statement: WRITE '(' expression_list ')' .

    $default  reduce using rule 46 (procedure_statement)


state 106

   49 expression_list: expression_list . ',' expression
   58 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 123
    ','  shift, and go to state 102


state 107

   49 expression_list: expression_list . ',' expression
   59 factor: ID '[' expression_list . ']'

    ','  shift, and go to state 102
    ']'  shift, and go to state 124


state 108

   62 factor: '(' expression ')' .

    $default  reduce using rule 62 (factor)


state 109

   40 ifelse: IF expression THEN statement .

    $default  reduce using rule 40 (ifelse)


state 110

   32 statement: conditions .
   37 conditions: IF expression THEN conditions . ELSE conditions
   41 ifelse: IF expression THEN conditions . ELSE ifelse

    ELSE  shift, and go to state 125

    $default  reduce using rule 32 (statement)


state 111

   51 expression: simple_expression RELOP simple_expression .
   54 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 90

    $default  reduce using rule 51 (expression)


state 112

   54 simple_expression: simple_expression ADDOP term .
   56 term: term . MULOP factor

    MULOP  shift, and go to state 91

    $default  reduce using rule 54 (simple_expression)


state 113

   56 term: term MULOP factor .

    $default  reduce using rule 56 (term)


state 114

   37 conditions: IF . expression THEN conditions ELSE conditions

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression         go to state 126
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 115

   38 conditions: WHILE expression DO conditions .

    $default  reduce using rule 38 (conditions)


state 116

   39 conditions: FOR ID ASSIGNOP expression . TO expression DO conditions

    TO  shift, and go to state 127


state 117

   13 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   17 subprogram_declaration: subprogram_head @4 declarations @5 subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 20
    PROCEDURE  shift, and go to state 21
    BBEGIN     shift, and go to state 22

    subprogram_declaration  go to state 23
    subprogram_head         go to state 24
    compound_statement      go to state 128


state 118

   10 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 129


state 119

   19 subprogram_head: FUNCTION ID @6 arguments ':' standard_type . ';'

    ';'  shift, and go to state 130


state 120

    6 identifier_list: identifier_list . ',' ID
   25 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 131


state 121

   23 arguments: @8 '(' parameter_list . ')'
   26 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 132
    ';'  shift, and go to state 133


state 122

   49 expression_list: expression_list ',' expression .

    $default  reduce using rule 49 (expression_list)


state 123

   58 factor: ID '(' expression_list ')' .

    $default  reduce using rule 58 (factor)


state 124

   59 factor: ID '[' expression_list ']' .

    $default  reduce using rule 59 (factor)


state 125

   37 conditions: IF expression THEN conditions ELSE . conditions
   41 ifelse: IF expression THEN conditions ELSE . ifelse

    ID      shift, and go to state 33
    READ    shift, and go to state 34
    WRITE   shift, and go to state 35
    BBEGIN  shift, and go to state 22
    IF      shift, and go to state 36
    WHILE   shift, and go to state 37
    FOR     shift, and go to state 38

    compound_statement   go to state 39
    conditions           go to state 134
    ifelse               go to state 135
    variable             go to state 45
    procedure_statement  go to state 46


state 126

   37 conditions: IF expression . THEN conditions ELSE conditions

    THEN  shift, and go to state 136


state 127

   39 conditions: FOR ID ASSIGNOP expression TO . expression DO conditions

    INUM   shift, and go to state 58
    RNUM   shift, and go to state 59
    ID     shift, and go to state 60
    NOT    shift, and go to state 61
    ADDOP  shift, and go to state 62
    '('    shift, and go to state 63

    expression         go to state 137
    simple_expression  go to state 65
    term               go to state 66
    factor             go to state 67


state 128

   17 subprogram_declaration: subprogram_head @4 declarations @5 subprogram_declarations compound_statement .

    $default  reduce using rule 17 (subprogram_declaration)


state 129

   10 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 138


state 130

   19 subprogram_head: FUNCTION ID @6 arguments ':' standard_type ';' .

    $default  reduce using rule 19 (subprogram_head)


state 131

   25 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 26
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28

    type           go to state 139
    standard_type  go to state 30


state 132

   23 arguments: @8 '(' parameter_list ')' .

    $default  reduce using rule 23 (arguments)


state 133

   26 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 140


state 134

   37 conditions: IF expression THEN conditions ELSE conditions .

    $default  reduce using rule 37 (conditions)


state 135

   41 ifelse: IF expression THEN conditions ELSE ifelse .

    $default  reduce using rule 41 (ifelse)


state 136

   37 conditions: IF expression THEN . conditions ELSE conditions

    ID      shift, and go to state 33
    READ    shift, and go to state 34
    WRITE   shift, and go to state 35
    BBEGIN  shift, and go to state 22
    IF      shift, and go to state 114
    WHILE   shift, and go to state 37
    FOR     shift, and go to state 38

    compound_statement   go to state 39
    conditions           go to state 141
    variable             go to state 45
    procedure_statement  go to state 46


state 137

   39 conditions: FOR ID ASSIGNOP expression TO expression . DO conditions

    DO  shift, and go to state 142


state 138

   10 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28

    standard_type  go to state 143


state 139

   25 parameter_list: identifier_list ':' type .

    $default  reduce using rule 25 (parameter_list)


state 140

    6 identifier_list: identifier_list . ',' ID
   26 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 144


state 141

   37 conditions: IF expression THEN conditions . ELSE conditions

    ELSE  shift, and go to state 145


state 142

   39 conditions: FOR ID ASSIGNOP expression TO expression DO . conditions

    ID      shift, and go to state 33
    READ    shift, and go to state 34
    WRITE   shift, and go to state 35
    BBEGIN  shift, and go to state 22
    IF      shift, and go to state 114
    WHILE   shift, and go to state 37
    FOR     shift, and go to state 38

    compound_statement   go to state 39
    conditions           go to state 146
    variable             go to state 45
    procedure_statement  go to state 46


state 143

   10 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 10 (type)


state 144

   26 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 26
    INTEGER  shift, and go to state 27
    REAL     shift, and go to state 28

    type           go to state 147
    standard_type  go to state 30


state 145

   37 conditions: IF expression THEN conditions ELSE . conditions

    ID      shift, and go to state 33
    READ    shift, and go to state 34
    WRITE   shift, and go to state 35
    BBEGIN  shift, and go to state 22
    IF      shift, and go to state 114
    WHILE   shift, and go to state 37
    FOR     shift, and go to state 38

    compound_statement   go to state 39
    conditions           go to state 134
    variable             go to state 45
    procedure_statement  go to state 46


state 146

   39 conditions: FOR ID ASSIGNOP expression TO expression DO conditions .

    $default  reduce using rule 39 (conditions)


state 147

   26 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 26 (parameter_list)
