Terminals which are not used

   NUMBER
   LT
   LE
   GT
   GE
   EQ
   NEQ
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   DIV
   MOD
   CHAR
   STRING
   BOOLEAN
   EMTPY
   CONDITIONAL
   TYPE
   NAME
   LIST
   ARRAY_ACCESS
   ARRAY_RANGE
   STATEMENT
   FUNCTION_CALL
   PROCEDURE_CALL
   WHILE_DO
   DECL
   SUBDECL
   SUBDECLS
   SUBPROGDECL
   SUBPROGDECLHEAD
   SUBPROGDECLBODY
   LOCAL
   PARAMETER
   IDLIST
   EXPR
   EXPRLIST
   PARALIST
   ARGLIST
   DECLIST
   STATLIST
   PROCSTAT
   COMPSTAT


Grammar

    0 $accept: program $end

    1 @1: /* empty */

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | /* empty */

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | /* empty */

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   14 @2: /* empty */

   15 subprogram_head: FUNCTION ID @2 arguments ':' standard_type ';'

   16 @3: /* empty */

   17 subprogram_head: PROCEDURE ID @3 arguments ';'

   18 arguments: '(' parameter_list ')'
   19          | /* empty */

   20 parameter_list: identifier_list ':' type
   21               | parameter_list ';' identifier_list ':' type

   22 compound_statement: BBEGIN optional_statements END

   23 optional_statements: statement_list
   24                    | /* empty */

   25 statement_list: statement
   26               | statement_list ';' statement

   27 statement: conditions
   28          | ifelse

   29 conditions: variable ASSIGNOP expression
   30           | procedure_statement
   31           | compound_statement
   32           | IF expression THEN conditions ELSE conditions
   33           | WHILE expression DO conditions
   34           | FOR ID ASSIGNOP expression TO expression DO conditions

   35 ifelse: IF expression THEN statement
   36       | IF expression THEN conditions ELSE ifelse

   37 variable: ID
   38         | ID '[' expression ']'

   39 procedure_statement: ID
   40                    | ID '(' expression_list ')'

   41 expression_list: expression
   42                | expression_list ',' expression

   43 expression: simple_expression
   44           | simple_expression RELOP simple_expression

   45 simple_expression: term
   46                  | ADDOP term
   47                  | simple_expression ADDOP term

   48 term: factor
   49     | term MULOP factor

   50 factor: ID
   51       | ID '(' expression_list ')'
   52       | ID '[' expression_list ']'
   53       | INUM
   54       | RNUM
   55       | '(' expression ')'
   56       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 18 40 51 55
')' (41) 2 18 40 51 55
',' (44) 4 42
'.' (46) 2
':' (58) 5 15 20 21
';' (59) 2 5 11 15 17 21 26
'[' (91) 8 38 52
']' (93) 8 38 52
error (256)
NUMBER (258)
INUM (259) 8 53
RNUM (260) 54
ID (261) 2 3 4 15 17 34 37 38 39 40 50 51 52
NOT (262) 56
ASSIGNOP (263) 29 34
RELOP (264) 44
LT (265)
LE (266)
GT (267)
GE (268)
EQ (269)
NEQ (270)
ADDOP (271) 46 47
OR (272)
PLUS (273)
MINUS (274)
MULOP (275) 49
AND (276)
STAR (277)
SLASH (278)
DIV (279)
MOD (280)
PROGRAM (281) 2
VAR (282) 5
ARRAY (283) 8
OF (284) 8
DOTDOT (285) 8
INTEGER (286) 9
REAL (287) 10
CHAR (288)
STRING (289)
BOOLEAN (290)
FUNCTION (291) 15
PROCEDURE (292) 17
BBEGIN (293) 22
END (294) 22
IF (295) 32 35 36
THEN (296) 32 35 36
ELSE (297) 32 36
WHILE (298) 33
DO (299) 33 34
FOR (300) 34
TO (301) 34
EMTPY (302)
CONDITIONAL (303)
TYPE (304)
NAME (305)
LIST (306)
ARRAY_ACCESS (307)
ARRAY_RANGE (308)
STATEMENT (309)
FUNCTION_CALL (310)
PROCEDURE_CALL (311)
WHILE_DO (312)
DECL (313)
SUBDECL (314)
SUBDECLS (315)
SUBPROGDECL (316)
SUBPROGDECLHEAD (317)
SUBPROGDECLBODY (318)
LOCAL (319)
PARAMETER (320)
IDLIST (321)
EXPR (322)
EXPRLIST (323)
PARALIST (324)
ARGLIST (325)
DECLIST (326)
STATLIST (327)
PROCSTAT (328)
COMPSTAT (329)


Nonterminals, with rules where they appear

$accept (83)
    on left: 0
program (84)
    on left: 2, on right: 0
@1 (85)
    on left: 1, on right: 2
identifier_list (86)
    on left: 3 4, on right: 2 4 5 20 21
declarations (87)
    on left: 5 6, on right: 2 5 13
type (88)
    on left: 7 8, on right: 5 20 21
standard_type (89)
    on left: 9 10, on right: 7 8 15
subprogram_declarations (90)
    on left: 11 12, on right: 2 11 13
subprogram_declaration (91)
    on left: 13, on right: 11
subprogram_head (92)
    on left: 15 17, on right: 13
@2 (93)
    on left: 14, on right: 15
@3 (94)
    on left: 16, on right: 17
arguments (95)
    on left: 18 19, on right: 15 17
parameter_list (96)
    on left: 20 21, on right: 18 21
compound_statement (97)
    on left: 22, on right: 2 13 31
optional_statements (98)
    on left: 23 24, on right: 22
statement_list (99)
    on left: 25 26, on right: 23 26
statement (100)
    on left: 27 28, on right: 25 26 35
conditions (101)
    on left: 29 30 31 32 33 34, on right: 27 32 33 34 36
ifelse (102)
    on left: 35 36, on right: 28 36
variable (103)
    on left: 37 38, on right: 29
procedure_statement (104)
    on left: 39 40, on right: 30
expression_list (105)
    on left: 41 42, on right: 40 42 51 52
expression (106)
    on left: 43 44, on right: 29 32 33 34 35 36 38 41 42 55
simple_expression (107)
    on left: 45 46 47, on right: 43 44 47
term (108)
    on left: 48 49, on right: 45 46 47 49
factor (109)
    on left: 50 51 52 53 54 55 56, on right: 48 49 56


state 0

    0 $accept: . program $end

    $default  reduce using rule 1 (@1)

    program  go to state 1
    @1       go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    2 program: @1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


state 3

    0 $accept: program $end .

    $default  accept


state 4

    2 program: @1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


state 5

    2 program: @1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


state 6

    2 program: @1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


state 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


state 8

    2 program: @1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


state 9

    2 program: @1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


state 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


state 11

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


state 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


state 13

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 15


state 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


state 15

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 22


state 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


state 17

   15 subprogram_head: FUNCTION . ID @2 arguments ':' standard_type ';'

    ID  shift, and go to state 24


state 18

   17 subprogram_head: PROCEDURE . ID @3 arguments ';'

    ID  shift, and go to state 25


state 19

   22 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    $default  reduce using rule 24 (optional_statements)

    compound_statement   go to state 30
    optional_statements  go to state 31
    statement_list       go to state 32
    statement            go to state 33
    conditions           go to state 34
    ifelse               go to state 35
    variable             go to state 36
    procedure_statement  go to state 37


state 20

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 38


state 21

   13 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 39


state 22

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 40


state 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 41
    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43

    type           go to state 44
    standard_type  go to state 45


state 24

   15 subprogram_head: FUNCTION ID . @2 arguments ':' standard_type ';'

    $default  reduce using rule 14 (@2)

    @2  go to state 46


state 25

   17 subprogram_head: PROCEDURE ID . @3 arguments ';'

    $default  reduce using rule 16 (@3)

    @3  go to state 47


state 26

   37 variable: ID .
   38         | ID . '[' expression ']'
   39 procedure_statement: ID .
   40                    | ID . '(' expression_list ')'

    '('  shift, and go to state 48
    '['  shift, and go to state 49

    ASSIGNOP  reduce using rule 37 (variable)
    $default  reduce using rule 39 (procedure_statement)


state 27

   32 conditions: IF . expression THEN conditions ELSE conditions
   35 ifelse: IF . expression THEN statement
   36       | IF . expression THEN conditions ELSE ifelse

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression         go to state 56
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 28

   33 conditions: WHILE . expression DO conditions

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression         go to state 60
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 29

   34 conditions: FOR . ID ASSIGNOP expression TO expression DO conditions

    ID  shift, and go to state 61


state 30

   31 conditions: compound_statement .

    $default  reduce using rule 31 (conditions)


state 31

   22 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 62


state 32

   23 optional_statements: statement_list .
   26 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 63

    $default  reduce using rule 23 (optional_statements)


state 33

   25 statement_list: statement .

    $default  reduce using rule 25 (statement_list)


state 34

   27 statement: conditions .

    $default  reduce using rule 27 (statement)


state 35

   28 statement: ifelse .

    $default  reduce using rule 28 (statement)


state 36

   29 conditions: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 64


state 37

   30 conditions: procedure_statement .

    $default  reduce using rule 30 (conditions)


state 38

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


state 39

    5 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 65


state 40

    2 program: @1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


state 41

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 66


state 42

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


state 43

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


state 44

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 67


state 45

    7 type: standard_type .

    $default  reduce using rule 7 (type)


state 46

   15 subprogram_head: FUNCTION ID @2 . arguments ':' standard_type ';'

    '('  shift, and go to state 68

    $default  reduce using rule 19 (arguments)

    arguments  go to state 69


state 47

   17 subprogram_head: PROCEDURE ID @3 . arguments ';'

    '('  shift, and go to state 68

    $default  reduce using rule 19 (arguments)

    arguments  go to state 70


state 48

   40 procedure_statement: ID '(' . expression_list ')'

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression_list    go to state 71
    expression         go to state 72
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 49

   38 variable: ID '[' . expression ']'

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression         go to state 73
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 50

   53 factor: INUM .

    $default  reduce using rule 53 (factor)


state 51

   54 factor: RNUM .

    $default  reduce using rule 54 (factor)


state 52

   50 factor: ID .
   51       | ID . '(' expression_list ')'
   52       | ID . '[' expression_list ']'

    '('  shift, and go to state 74
    '['  shift, and go to state 75

    $default  reduce using rule 50 (factor)


state 53

   56 factor: NOT . factor

    INUM  shift, and go to state 50
    RNUM  shift, and go to state 51
    ID    shift, and go to state 52
    NOT   shift, and go to state 53
    '('   shift, and go to state 55

    factor  go to state 76


state 54

   46 simple_expression: ADDOP . term

    INUM  shift, and go to state 50
    RNUM  shift, and go to state 51
    ID    shift, and go to state 52
    NOT   shift, and go to state 53
    '('   shift, and go to state 55

    term    go to state 77
    factor  go to state 59


state 55

   55 factor: '(' . expression ')'

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression         go to state 78
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 56

   32 conditions: IF expression . THEN conditions ELSE conditions
   35 ifelse: IF expression . THEN statement
   36       | IF expression . THEN conditions ELSE ifelse

    THEN  shift, and go to state 79


state 57

   43 expression: simple_expression .
   44           | simple_expression . RELOP simple_expression
   47 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 80
    ADDOP  shift, and go to state 81

    $default  reduce using rule 43 (expression)


state 58

   45 simple_expression: term .
   49 term: term . MULOP factor

    MULOP  shift, and go to state 82

    $default  reduce using rule 45 (simple_expression)


state 59

   48 term: factor .

    $default  reduce using rule 48 (term)


state 60

   33 conditions: WHILE expression . DO conditions

    DO  shift, and go to state 83


state 61

   34 conditions: FOR ID . ASSIGNOP expression TO expression DO conditions

    ASSIGNOP  shift, and go to state 84


state 62

   22 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 22 (compound_statement)


state 63

   26 statement_list: statement_list ';' . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    statement            go to state 85
    conditions           go to state 34
    ifelse               go to state 35
    variable             go to state 36
    procedure_statement  go to state 37


state 64

   29 conditions: variable ASSIGNOP . expression

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression         go to state 86
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 65

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   13 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 87


state 66

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 88


state 67

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


state 68

   18 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 89
    parameter_list   go to state 90


state 69

   15 subprogram_head: FUNCTION ID @2 arguments . ':' standard_type ';'

    ':'  shift, and go to state 91


state 70

   17 subprogram_head: PROCEDURE ID @3 arguments . ';'

    ';'  shift, and go to state 92


state 71

   40 procedure_statement: ID '(' expression_list . ')'
   42 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 93
    ','  shift, and go to state 94


state 72

   41 expression_list: expression .

    $default  reduce using rule 41 (expression_list)


state 73

   38 variable: ID '[' expression . ']'

    ']'  shift, and go to state 95


state 74

   51 factor: ID '(' . expression_list ')'

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression_list    go to state 96
    expression         go to state 72
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 75

   52 factor: ID '[' . expression_list ']'

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression_list    go to state 97
    expression         go to state 72
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 76

   56 factor: NOT factor .

    $default  reduce using rule 56 (factor)


state 77

   46 simple_expression: ADDOP term .
   49 term: term . MULOP factor

    MULOP  shift, and go to state 82

    $default  reduce using rule 46 (simple_expression)


state 78

   55 factor: '(' expression . ')'

    ')'  shift, and go to state 98


state 79

   32 conditions: IF expression THEN . conditions ELSE conditions
   35 ifelse: IF expression THEN . statement
   36       | IF expression THEN . conditions ELSE ifelse

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    statement            go to state 99
    conditions           go to state 100
    ifelse               go to state 35
    variable             go to state 36
    procedure_statement  go to state 37


state 80

   44 expression: simple_expression RELOP . simple_expression

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    simple_expression  go to state 101
    term               go to state 58
    factor             go to state 59


state 81

   47 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 50
    RNUM  shift, and go to state 51
    ID    shift, and go to state 52
    NOT   shift, and go to state 53
    '('   shift, and go to state 55

    term    go to state 102
    factor  go to state 59


state 82

   49 term: term MULOP . factor

    INUM  shift, and go to state 50
    RNUM  shift, and go to state 51
    ID    shift, and go to state 52
    NOT   shift, and go to state 53
    '('   shift, and go to state 55

    factor  go to state 103


state 83

   33 conditions: WHILE expression DO . conditions

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 104
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    conditions           go to state 105
    variable             go to state 36
    procedure_statement  go to state 37


state 84

   34 conditions: FOR ID ASSIGNOP . expression TO expression DO conditions

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression         go to state 106
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 85

   26 statement_list: statement_list ';' statement .

    $default  reduce using rule 26 (statement_list)


state 86

   29 conditions: variable ASSIGNOP expression .

    $default  reduce using rule 29 (conditions)


state 87

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


state 88

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 107


state 89

    4 identifier_list: identifier_list . ',' ID
   20 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 108


state 90

   18 arguments: '(' parameter_list . ')'
   21 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 109
    ';'  shift, and go to state 110


state 91

   15 subprogram_head: FUNCTION ID @2 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43

    standard_type  go to state 111


state 92

   17 subprogram_head: PROCEDURE ID @3 arguments ';' .

    $default  reduce using rule 17 (subprogram_head)


state 93

   40 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 40 (procedure_statement)


state 94

   42 expression_list: expression_list ',' . expression

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression         go to state 112
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 95

   38 variable: ID '[' expression ']' .

    $default  reduce using rule 38 (variable)


state 96

   42 expression_list: expression_list . ',' expression
   51 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 113
    ','  shift, and go to state 94


state 97

   42 expression_list: expression_list . ',' expression
   52 factor: ID '[' expression_list . ']'

    ','  shift, and go to state 94
    ']'  shift, and go to state 114


state 98

   55 factor: '(' expression ')' .

    $default  reduce using rule 55 (factor)


state 99

   35 ifelse: IF expression THEN statement .

    $default  reduce using rule 35 (ifelse)


state 100

   27 statement: conditions .
   32 conditions: IF expression THEN conditions . ELSE conditions
   36 ifelse: IF expression THEN conditions . ELSE ifelse

    ELSE  shift, and go to state 115

    $default  reduce using rule 27 (statement)


state 101

   44 expression: simple_expression RELOP simple_expression .
   47 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 81

    $default  reduce using rule 44 (expression)


state 102

   47 simple_expression: simple_expression ADDOP term .
   49 term: term . MULOP factor

    MULOP  shift, and go to state 82

    $default  reduce using rule 47 (simple_expression)


state 103

   49 term: term MULOP factor .

    $default  reduce using rule 49 (term)


state 104

   32 conditions: IF . expression THEN conditions ELSE conditions

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression         go to state 116
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 105

   33 conditions: WHILE expression DO conditions .

    $default  reduce using rule 33 (conditions)


state 106

   34 conditions: FOR ID ASSIGNOP expression . TO expression DO conditions

    TO  shift, and go to state 117


state 107

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 118


state 108

   20 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 41
    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43

    type           go to state 119
    standard_type  go to state 45


state 109

   18 arguments: '(' parameter_list ')' .

    $default  reduce using rule 18 (arguments)


state 110

   21 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 120


state 111

   15 subprogram_head: FUNCTION ID @2 arguments ':' standard_type . ';'

    ';'  shift, and go to state 121


state 112

   42 expression_list: expression_list ',' expression .

    $default  reduce using rule 42 (expression_list)


state 113

   51 factor: ID '(' expression_list ')' .

    $default  reduce using rule 51 (factor)


state 114

   52 factor: ID '[' expression_list ']' .

    $default  reduce using rule 52 (factor)


state 115

   32 conditions: IF expression THEN conditions ELSE . conditions
   36 ifelse: IF expression THEN conditions ELSE . ifelse

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    conditions           go to state 122
    ifelse               go to state 123
    variable             go to state 36
    procedure_statement  go to state 37


state 116

   32 conditions: IF expression . THEN conditions ELSE conditions

    THEN  shift, and go to state 124


state 117

   34 conditions: FOR ID ASSIGNOP expression TO . expression DO conditions

    INUM   shift, and go to state 50
    RNUM   shift, and go to state 51
    ID     shift, and go to state 52
    NOT    shift, and go to state 53
    ADDOP  shift, and go to state 54
    '('    shift, and go to state 55

    expression         go to state 125
    simple_expression  go to state 57
    term               go to state 58
    factor             go to state 59


state 118

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 126


state 119

   20 parameter_list: identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)


state 120

    4 identifier_list: identifier_list . ',' ID
   21 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 127


state 121

   15 subprogram_head: FUNCTION ID @2 arguments ':' standard_type ';' .

    $default  reduce using rule 15 (subprogram_head)


state 122

   32 conditions: IF expression THEN conditions ELSE conditions .

    $default  reduce using rule 32 (conditions)


state 123

   36 ifelse: IF expression THEN conditions ELSE ifelse .

    $default  reduce using rule 36 (ifelse)


state 124

   32 conditions: IF expression THEN . conditions ELSE conditions

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 104
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    conditions           go to state 128
    variable             go to state 36
    procedure_statement  go to state 37


state 125

   34 conditions: FOR ID ASSIGNOP expression TO expression . DO conditions

    DO  shift, and go to state 129


state 126

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 130


state 127

   21 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 41
    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43

    type           go to state 131
    standard_type  go to state 45


state 128

   32 conditions: IF expression THEN conditions . ELSE conditions

    ELSE  shift, and go to state 132


state 129

   34 conditions: FOR ID ASSIGNOP expression TO expression DO . conditions

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 104
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    conditions           go to state 133
    variable             go to state 36
    procedure_statement  go to state 37


state 130

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 42
    REAL     shift, and go to state 43

    standard_type  go to state 134


state 131

   21 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 21 (parameter_list)


state 132

   32 conditions: IF expression THEN conditions ELSE . conditions

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 104
    WHILE   shift, and go to state 28
    FOR     shift, and go to state 29

    compound_statement   go to state 30
    conditions           go to state 122
    variable             go to state 36
    procedure_statement  go to state 37


state 133

   34 conditions: FOR ID ASSIGNOP expression TO expression DO conditions .

    $default  reduce using rule 34 (conditions)


state 134

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)
